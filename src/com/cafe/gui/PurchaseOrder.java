/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.cafe.gui;

import com.cafe.model.Mysql;
import com.cafe.model.Theme;
import com.cafe.style.CustomStyle;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.net.URL;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JScrollBar;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author User
 */
public class PurchaseOrder extends javax.swing.JPanel implements Theme {

    enum ItemType {
        DIRRECT, KITCHEN
    }
    private HashMap<String, ItemCard> itemMap = new HashMap<>();
    private Dashboard dashboard;
    private int itemsPerRow = 6;
    private String quantity = "1";
    private String selectedSupplier;

    private ItemType itemType = ItemType.DIRRECT;
    private ItemCard selectedItem;

    public void setSelectedItem(ItemCard selectedItem) {
        this.selectedItem = selectedItem;
        if (this.selectedItem != null) {
            jTextField2.setText(selectedItem.getItemName());
        }
    }

    public void setItemType(ItemType itemType) {
        this.itemType = itemType;
    }

    public ItemType getItemType() {
        return itemType;
    }

    public void setItemsPerRow(int itemsPerRow) {
        this.itemsPerRow = itemsPerRow;
        loadDirrectSellingItems();
        loadKitchenItems();
    }

    public Dashboard getDashboard() {
        return dashboard;
    }

    public void setDashboard(Dashboard dashboard) {
        this.dashboard = dashboard;
    }

    /**
     * Creates new form PurchaseOrder
     */
    public PurchaseOrder() {
        initComponents();
        loadDirrectSellingItems();
        loadKitchenItems();
        setStyle();
        setUpDateChooser();
        hideHistory();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jPanel8 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jPanel10 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jPanel15 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel12 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel11 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jPanel18 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel19 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jPanel20 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel21 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();

        jMenuItem1.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cafe/img/299071_trashcan_trashcan.png"))); // NOI18N
        jMenuItem1.setText("CLEAR ALL");
        jMenuItem1.setIconTextGap(10);
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        jMenuItem2.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cafe/img/po_32.png"))); // NOI18N
        jMenuItem2.setText("UPDATE STATUS AS 'RECEIVED'");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jPopupMenu2.add(jMenuItem2);

        setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 20, 10, 20));
        setLayout(new java.awt.BorderLayout(10, 0));

        jPanel8.setLayout(new java.awt.BorderLayout(10, 10));

        jPanel1.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(null, "ORDER LIST", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Semibold", 0, 16)), javax.swing.BorderFactory.createEmptyBorder(15, 10, 15, 10))); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(490, 737));
        jPanel1.setLayout(new java.awt.BorderLayout(0, 10));

        jLabel5.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        jLabel5.setText("ITEM COUNT");

        jLabel6.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("0");

        jLabel7.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        jLabel7.setText("SUPPLIER");

        jLabel8.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        jLabel8.setText("Not Selected");

        jButton2.setBackground(new java.awt.Color(77, 120, 204));
        jButton2.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("PRINT ORDER");
        jButton2.setBorderPainted(false);
        jButton2.setPreferredSize(new java.awt.Dimension(130, 48));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(102, 102, 102));
        jButton4.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("VIEW HISTORY");
        jButton4.setPreferredSize(new java.awt.Dimension(93, 48));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addGap(18, 21, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel1.add(jPanel13, java.awt.BorderLayout.PAGE_END);

        jTable1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jTable1.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ITEM", "UNIT", "QTY", "TYPE"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setFocusable(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTable1MouseReleased(evt);
            }
        });
        jScrollPane4.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(0);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(0);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(0);
        }

        jPanel1.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        jPanel8.add(jPanel1, java.awt.BorderLayout.EAST);

        jPanel2.setLayout(new java.awt.BorderLayout(0, 20));

        jPanel3.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(null, "ADD ITEM", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Semibold", 0, 14)), javax.swing.BorderFactory.createEmptyBorder(15, 15, 15, 15))); // NOI18N
        jPanel3.setLayout(new java.awt.BorderLayout(20, 0));

        jPanel6.setPreferredSize(new java.awt.Dimension(200, 40));
        jPanel6.setLayout(new java.awt.BorderLayout());

        jButton1.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        jButton1.setText("1");
        jButton1.setPreferredSize(new java.awt.Dimension(75, 40));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton1KeyPressed(evt);
            }
        });
        jPanel6.add(jButton1, java.awt.BorderLayout.SOUTH);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Item Quantity");
        jPanel6.add(jLabel1, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel7.setPreferredSize(new java.awt.Dimension(700, 70));
        jPanel7.setLayout(new java.awt.GridLayout(1, 2, 20, 0));

        jPanel9.setLayout(new java.awt.BorderLayout());

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Required Date");
        jPanel9.add(jLabel3, java.awt.BorderLayout.CENTER);

        jDateChooser1.setDateFormatString("yyyy-MM-dd");
        jDateChooser1.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jDateChooser1.setPreferredSize(new java.awt.Dimension(0, 40));
        jPanel9.add(jDateChooser1, java.awt.BorderLayout.SOUTH);

        jPanel7.add(jPanel9);

        jPanel10.setLayout(new java.awt.BorderLayout());

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Supplier Mobile");
        jPanel10.add(jLabel2, java.awt.BorderLayout.CENTER);

        jTextField1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTextField1.setPreferredSize(new java.awt.Dimension(0, 40));
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });
        jPanel10.add(jTextField1, java.awt.BorderLayout.SOUTH);

        jPanel7.add(jPanel10);

        jPanel14.setLayout(new java.awt.BorderLayout());

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel9.setText("Selected Item");
        jPanel14.add(jLabel9, java.awt.BorderLayout.CENTER);

        jTextField2.setEditable(false);
        jTextField2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTextField2.setPreferredSize(new java.awt.Dimension(0, 40));
        jPanel14.add(jTextField2, java.awt.BorderLayout.SOUTH);

        jPanel7.add(jPanel14);

        jPanel3.add(jPanel7, java.awt.BorderLayout.LINE_START);

        jPanel15.setPreferredSize(new java.awt.Dimension(150, 70));
        jPanel15.setLayout(new java.awt.BorderLayout());

        jButton3.setBackground(new java.awt.Color(77, 120, 204));
        jButton3.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("ADD ITEM");
        jButton3.setBorderPainted(false);
        jButton3.setPreferredSize(new java.awt.Dimension(75, 40));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel15.add(jButton3, java.awt.BorderLayout.SOUTH);

        jPanel3.add(jPanel15, java.awt.BorderLayout.LINE_END);

        jPanel2.add(jPanel3, java.awt.BorderLayout.PAGE_START);

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(null, "SELECT ITEMS TO ADD", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Semibold", 0, 14)), javax.swing.BorderFactory.createEmptyBorder(15, 10, 15, 10))); // NOI18N
        jTabbedPane1.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });
        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });

        jPanel4.setLayout(new java.awt.BorderLayout());

        jScrollPane2.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                jScrollPane2MouseWheelMoved(evt);
            }
        });

        jPanel12.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                jPanel12MouseWheelMoved(evt);
            }
        });
        jPanel12.setLayout(new javax.swing.BoxLayout(jPanel12, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane2.setViewportView(jPanel12);

        jPanel4.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("DIRRECT SELLING ITEMS", jPanel4);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jScrollPane1.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                jScrollPane1MouseWheelMoved(evt);
            }
        });

        jPanel11.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                jPanel11MouseWheelMoved(evt);
            }
        });
        jPanel11.setLayout(new javax.swing.BoxLayout(jPanel11, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane1.setViewportView(jPanel11);

        jPanel5.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("KITCHEN ITEMS", jPanel5);

        jPanel2.add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        jPanel8.add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel16.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(null, "PURCHASE ORDER HISTORY", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Semibold", 0, 14)), javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10))); // NOI18N
        jPanel16.setPreferredSize(new java.awt.Dimension(600, 737));
        jPanel16.setLayout(new java.awt.BorderLayout(0, 10));

        jPanel17.setLayout(new java.awt.GridLayout(2, 3, 10, 10));

        jTextField3.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jTextField3.setPreferredSize(new java.awt.Dimension(71, 40));
        jTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField3KeyReleased(evt);
            }
        });
        jPanel17.add(jTextField3);

        jTextField4.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jTextField4.setPreferredSize(new java.awt.Dimension(71, 40));
        jTextField4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField4KeyReleased(evt);
            }
        });
        jPanel17.add(jTextField4);

        jTextField5.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jTextField5.setPreferredSize(new java.awt.Dimension(71, 40));
        jTextField5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField5KeyReleased(evt);
            }
        });
        jPanel17.add(jTextField5);

        jComboBox1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.setToolTipText("Select order status");
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });
        jPanel17.add(jComboBox1);

        jPanel16.add(jPanel17, java.awt.BorderLayout.PAGE_START);

        jPanel18.setLayout(new java.awt.BorderLayout());

        jSplitPane1.setDividerLocation(350);
        jSplitPane1.setDividerSize(10);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jPanel19.setLayout(new java.awt.BorderLayout(0, 5));

        jLabel10.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jLabel10.setText("ORDER ITEM LIST");
        jPanel19.add(jLabel10, java.awt.BorderLayout.PAGE_START);

        jTable3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "ITEM NAME", "UNIT", "QUANTITY"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable3.setFocusable(false);
        jScrollPane5.setViewportView(jTable3);
        if (jTable3.getColumnModel().getColumnCount() > 0) {
            jTable3.getColumnModel().getColumn(0).setResizable(false);
            jTable3.getColumnModel().getColumn(0).setPreferredWidth(0);
            jTable3.getColumnModel().getColumn(1).setResizable(false);
            jTable3.getColumnModel().getColumn(2).setResizable(false);
            jTable3.getColumnModel().getColumn(2).setPreferredWidth(0);
            jTable3.getColumnModel().getColumn(3).setResizable(false);
            jTable3.getColumnModel().getColumn(3).setPreferredWidth(0);
        }

        jPanel19.add(jScrollPane5, java.awt.BorderLayout.CENTER);

        jSplitPane1.setBottomComponent(jPanel19);

        jPanel20.setLayout(new java.awt.BorderLayout(0, 5));

        jLabel4.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jLabel4.setText("PURCHASE ORDER LIST");
        jPanel20.add(jLabel4, java.awt.BorderLayout.PAGE_START);

        jTable2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ORDER ID", "ORDER DATE", "REQUIRED ON", "SUPPLIER"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setFocusable(false);
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable2MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTable2MouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setResizable(false);
            jTable2.getColumnModel().getColumn(1).setResizable(false);
            jTable2.getColumnModel().getColumn(2).setResizable(false);
            jTable2.getColumnModel().getColumn(3).setResizable(false);
            jTable2.getColumnModel().getColumn(3).setPreferredWidth(0);
        }

        jPanel20.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jSplitPane1.setLeftComponent(jPanel20);

        jPanel18.add(jSplitPane1, java.awt.BorderLayout.CENTER);

        jPanel16.add(jPanel18, java.awt.BorderLayout.CENTER);

        jPanel21.setPreferredSize(new java.awt.Dimension(370, 40));
        jPanel21.setLayout(new java.awt.BorderLayout());

        jButton5.setBackground(new java.awt.Color(77, 120, 204));
        jButton5.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("CLOSE PURCHASE HISTORY");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel21.add(jButton5, java.awt.BorderLayout.CENTER);

        jPanel16.add(jPanel21, java.awt.BorderLayout.PAGE_END);

        jPanel8.add(jPanel16, java.awt.BorderLayout.WEST);

        add(jPanel8, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton1KeyPressed
        // TODO add your handling code here:
        validateAndSetPayementInput(evt);
    }//GEN-LAST:event_jButton1KeyPressed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        addItem();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        jButton1.setText("");
        quantity = "";
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_jTabbedPane1MouseClicked

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        // TODO add your handling code here:
        if (jPanel12.isShowing()) {
            itemType = ItemType.DIRRECT;
        } else if (jPanel11.isShowing()) {
            itemType = ItemType.KITCHEN;
        }
    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        // TODO add your handling code here:
        checkSupplierMobile();
    }//GEN-LAST:event_jTextField1KeyReleased

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {

            for (ItemCard item : itemMap.values()) {
                if (String.valueOf(jTable1.getValueAt(jTable1.getSelectedRow(), 0)).equals(item.getItemName())) {
                    itemMap.remove(item.getId() + item.getItemType().name());
                    loadTable();
                    break;
                }
            }
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        validateAndSaveOrder();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTable1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseReleased
        // TODO add your handling code here:

        if (evt.getButton() == MouseEvent.BUTTON3) {
            jPopupMenu1.updateUI();
            jPopupMenu1.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jTable1MouseReleased

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        resetOrder();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:        
        showHistory();
        loadOrderStateList();
        loadHistory();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        reset();
        hideHistory();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jTextField3KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyReleased
        // TODO add your handling code here:
        loadHistory();
    }//GEN-LAST:event_jTextField3KeyReleased

    private void jTextField4KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField4KeyReleased
        // TODO add your handling code here:
        loadHistory();
    }//GEN-LAST:event_jTextField4KeyReleased

    private void jTextField5KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField5KeyReleased
        // TODO add your handling code here:
        loadHistory();
    }//GEN-LAST:event_jTextField5KeyReleased

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        // TODO add your handling code here:
        loadHistory();
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        // TODO add your handling code here:
        if (evt.getButton() == MouseEvent.BUTTON1){
            loadItemList();
        }
    }//GEN-LAST:event_jTable2MouseClicked

    private void jTable2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseReleased
        // TODO add your handling code here:
        if (evt.getButton() == MouseEvent.BUTTON3 && jTable2.getSelectedRow() != -1) {
            jPopupMenu2.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jTable2MouseReleased

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        updateOrderState();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jTable2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable2MousePressed

    private void jPanel12MouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_jPanel12MouseWheelMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel12MouseWheelMoved

    private void jScrollPane2MouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_jScrollPane2MouseWheelMoved
        // TODO add your handling code here:
        JScrollBar scrollbar = jScrollPane2.getVerticalScrollBar(); 
        scrollbar.setValue(scrollbar.getValue()+evt.getWheelRotation()*20); 
    }//GEN-LAST:event_jScrollPane2MouseWheelMoved

    private void jPanel11MouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_jPanel11MouseWheelMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel11MouseWheelMoved

    private void jScrollPane1MouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_jScrollPane1MouseWheelMoved
        // TODO add your handling code here:
        JScrollBar scrollbar = jScrollPane1.getVerticalScrollBar(); 
        scrollbar.setValue(scrollbar.getValue()+evt.getWheelRotation()*20); 
    }//GEN-LAST:event_jScrollPane1MouseWheelMoved


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox<String> jComboBox1;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    // End of variables declaration//GEN-END:variables

    private void reset(){
        jTable2.clearSelection();
        DefaultTableModel model = (DefaultTableModel) jTable3.getModel();
        model.setRowCount(0);
        jTextField3.setText("");
        jTextField4.setText("");
        jTextField5.setText("");
        
    }
    private void updateOrderState() {
        if (jTable2.getSelectedRow() != -1) {
            Mysql.execute("UPDATE purchase_order "
                    + "SET order_state_id = (SELECT id FROM order_state WHERE `name`='Received') "
                    + "WHERE id = '" + String.valueOf(jTable2.getValueAt(jTable2.getSelectedRow(), 0)) + "'");
            
            reset();
            loadHistory();
        }
    }

    public void loadDirrectSellingItems() {
        jPanel12.removeAll();
        try {
            ResultSet resultsetDirect = Mysql.execute("SELECT menu_item.id,menu_item.name,menu_item_category.name AS `category`,brand.name AS `brand`,"
                    + "direct_selling_stock.selling_price AS `price`,`rate`,menu_item.image_path,unit_of_measure.name AS unit,unit_of_measure.id "
                    + "FROM menu_item INNER JOIN direct_selling_stock ON direct_selling_stock.menu_item_id = menu_item.id "
                    + "INNER JOIN menu_item_category ON menu_item_category.id = menu_item.menu_item_category_id "
                    + "INNER JOIN brand ON menu_item.brand_id = brand.id LEFT JOIN discount ON discount.menu_item_id = menu_item.id "
                    + "INNER JOIN unit_of_measure ON unit_of_measure_id = unit_of_measure.id");

            boolean hasNext = resultsetDirect.next();

            if (hasNext) {
                System.out.println("ok");
                while (hasNext) {
                    ItemRow itemRow = new ItemRow();
                    for (int j = 0; j < itemsPerRow; j++) {
                        if (!hasNext) {
                            break;
                        }
                        ItemCard item = new ItemCard();
                        item.setId(resultsetDirect.getInt("menu_item.id"));
                        item.setItemName(resultsetDirect.getString("menu_item.name"));
                        item.setPrice(resultsetDirect.getDouble("price"));
                        item.setDiscount(resultsetDirect.getDouble("price") * (resultsetDirect.getDouble("rate") / 100));
                        item.setBrand(resultsetDirect.getString("brand"));
                        item.setImage(resultsetDirect.getString("image_path"));
                        item.getjLabel2().setText("Unit : " + resultsetDirect.getString("unit"));
                        item.setUnitOfMeasureId(resultsetDirect.getString("unit_of_measure.id"));

                        if (itemsPerRow == 7) {
                            item.setMaximumSize(new Dimension(180, 200));
                            item.setPreferredSize(new Dimension(180, 200));
                        }
                        item.setPurchaseOrder(this);
                        itemRow.add(item);

                        hasNext = resultsetDirect.next();
                    }
                    jPanel12.add(itemRow);
                }
            }
            jPanel12.updateUI();
        } catch (SQLException ex) {
            Splash.logger.log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }

    }

    @Override
    public void setStyle() {
        CustomStyle.setComponentBackground(
                jPanel12, jPanel11
        );

        jTable1.setDefaultRenderer(String.class, CustomStyle.renderCenter);
        jTable2.setDefaultRenderer(String.class, CustomStyle.renderCenter);
        jTable3.setDefaultRenderer(String.class, CustomStyle.renderCenter);

        jTextField3.putClientProperty("JTextField.placeholderText", "Search order id...");
        jTextField4.putClientProperty("JTextField.placeholderText", "Search supplier mobile...");
        jTextField5.putClientProperty("JTextField.placeholderText", "Search order date...");

        CustomStyle.showClearButton(
                jTextField1, jTextField3, jTextField3, jTextField4, jTextField5
        );
    }

    @Override
    public void setComponentTheme() {
        setStyle();
    }

    private void loadKitchenItems() {
        jPanel11.removeAll();
        try {
            ResultSet resultsetKitchen = Mysql.execute("SELECT kitchen_item.id AS id,kitchen_item.name AS `name`,"
                    + "unit_of_measure.name AS unit, brand.name AS brand,unit_of_measure.id "
                    + "FROM kitchen_item  "
                    + "INNER JOIN unit_of_measure ON unit_of_measure.id = kitchen_item.unit_of_measure "
                    + "INNER JOIN brand ON brand.id = kitchen_item.brand_id");

            boolean hasNext = resultsetKitchen.next();

            if (hasNext) {
                System.out.println("ok");
                while (hasNext) {
                    ItemRow itemRow = new ItemRow();
                    for (int j = 0; j < itemsPerRow; j++) {
                        if (!hasNext) {
                            break;
                        }
                        ItemCard item = new ItemCard();
                        item.setId(resultsetKitchen.getInt("id"));
                        item.setItemName(resultsetKitchen.getString("name"));
                        item.setPrice(0);
                        item.getjLabel2().setText("Unit : " + resultsetKitchen.getString("unit"));
                        item.setUnitOfMeasureId(resultsetKitchen.getString("unit_of_measure.id"));
                        item.setImage("/com/cafe/itemImg/emptyItem.png");
                        if (itemsPerRow == 7) {
                            item.setMaximumSize(new Dimension(180, 200));
                            item.setPreferredSize(new Dimension(180, 200));
                        }
                        item.setPurchaseOrder(this);
                        itemRow.add(item);

                        hasNext = resultsetKitchen.next();
                    }
                    jPanel11.add(itemRow);
                }
            }
            jPanel11.updateUI();
        } catch (SQLException ex) {
            Splash.logger.log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }

    }

    private void validateAndSetPayementInput(KeyEvent evt) {
        String key = String.valueOf(evt.getKeyChar());
        if (key.matches("[0-9]")) {
            quantity += key;
        }

        if (evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
            if (quantity.length() > 1) {
                quantity = quantity.substring(0, quantity.length() - 1);
            } else {
                quantity = "";
            }
        }

        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            quantity = "";
        }

        if (quantity.isBlank()) {
            jButton1.setText("0");
        } else {
            jButton1.setText(quantity);
        }
    }

    private boolean addItem() {
        if (quantity.isBlank()) {
            dashboard.setWarningStatus("Please Enter a quantity to add");
            return false;
        } else if (this.selectedItem == null) {
            dashboard.setWarningStatus("Please Select an Item to add");
            return false;
        } else {
            //add item to the table
            boolean found = false;
            if (itemMap.containsKey(selectedItem.getId() + itemType.name())) {
                found = true;
                itemMap.get(selectedItem.getId() + getItemType().name())
                        .setQuantity(itemMap.get(selectedItem.getId() + getItemType().name()).getQuantity() + Double.parseDouble(quantity));
            }
            if (!found) {
                selectedItem.setQuantity(Double.parseDouble(quantity));
                selectedItem.setItemType(itemType);
                itemMap.put(selectedItem.getId() + itemType.name(), selectedItem);
            }

            resetItem();
            loadTable();

            return true;
        }
    }

    private void loadTable() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        for (ItemCard item : itemMap.values()) {
            Vector v = new Vector();
            v.add(item.getItemName());
            v.add(item.getjLabel2().getText().split(":")[1]);
            v.add(item.getQuantity());
            v.add(item.getItemType().name());
            model.addRow(v);
        }

        jLabel6.setText(String.valueOf(itemMap.size()));
    }

    private void setUpDateChooser() {
        Date date = new Date(new Date().getTime() + 1000 * 60 * 60 * 24);
        jDateChooser1.setMinSelectableDate(date);
        jDateChooser1.setDate(date);
        jDateChooser1.getComponent(1).setForeground(new Color(77, 120, 204));

        jDateChooser1.getComponent(1).addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                try {
                    jDateChooser1.getComponent(1).setForeground(new Color(77, 120, 204));
                } catch (Exception e) {
                }
            }
        });
    }

    private void checkSupplierMobile() {
        if (jTextField1.getText().length() == 10) {
            if (jTextField1.getText().matches("[0-9]{10}")) {
                try {
                    ResultSet result = Mysql.execute("SELECT * FROM `supplier` WHERE `mobile` = '" + jTextField1.getText() + "'");
                    if (!result.next()) {
                        String name = JOptionPane.showInputDialog("Enter Supplier name to Register");
                        if (name != null && !name.isBlank()) {
                            Mysql.execute("INSERT INTO `supplier` (`mobile`,`name`,`supplier_category_id`) "
                                    + "VALUES('" + jTextField1.getText() + "','" + name + "','0')");
                            this.dashboard.setSuccessStatus("Supplier registered");
                            jButton3.grabFocus();
                            jLabel8.setText(jTextField1.getText());
                            selectedSupplier = jTextField1.getText();
                        } else {
                            jTextField1.setText(jTextField1.getText().substring(0, 7));
                            jLabel8.setText("Not Selected");
                            selectedSupplier = "";
                        }
                    } else {
                        jLabel8.setText(jTextField1.getText());
                        selectedSupplier = jTextField1.getText();
                        jButton3.grabFocus();
                    }
                } catch (SQLException ex) {
                    Splash.logger.log(Level.SEVERE, null, ex);
                    ex.printStackTrace();
                }
            } else {
                jTextField1.setText(jTextField1.getText().substring(0, 7));
                this.dashboard.setWarningStatus("Invalid mobile, please change");
            }
        } else if (jTextField1.getText().length() > 10) {
            this.dashboard.setWarningStatus("Only 10 characters for mobile");
            jTextField1.setText(jTextField1.getText().substring(0, 10));
        } else {
            jLabel8.setText("Not Selected");
            selectedSupplier = "";
        }
    }

    private void validateAndSaveOrder() {
        if (itemMap.size() == 0) {
            dashboard.setWarningStatus("Please Select items to add");
        } else if (jDateChooser1.getDate() == null) {
            dashboard.setWarningStatus("Please select a valid date");
        } else if (selectedSupplier == null || selectedSupplier.isBlank()) {
            dashboard.setWarningStatus("Please enter Supplier mobile");
        } else {
            saveOrder();
        }
    }

    private void saveOrder() {
        String id = this.dashboard.getUser().getMobile().substring(7) + "_" + System.currentTimeMillis();
        Date date = new Date();
        if (printOrder(id, date)) {
            //purchase_order - id,order_date,required_date,supplier_mobile,order_state_id
            Mysql.execute("INSERT INTO `purchase_order` (`id`,`order_date`,`required_date`,`supplier_mobile`,`order_state_id`) "
                    + "VALUES('" + id + "','" + new SimpleDateFormat("yyyy-MM-dd").format(date) + "','" + new SimpleDateFormat("yyyy-MM-dd").format(jDateChooser1.getDate()) + "',"
                    + "'" + selectedSupplier + "','1')");

            //purchase_order_item - id,name,qty,order_id,unit
            for (ItemCard item : itemMap.values()) {
                Mysql.execute("INSERT INTO `purchase_order_item` (`name`,`qty`,`purchase_order_id`,`unit_of_measure_id`) "
                        + "VALUES('" + item.getItemName() + "','" + item.getQuantity() + "','" + id + "','" + item.getUnitOfMeasureId() + "')");
            }

            resetOrder();
            dashboard.setSuccessStatus("Order saved successfully");
        } else {
            dashboard.setWarningStatus("Error printing order");
        }
    }

    private boolean printOrder(String id, Date date) {
        try {
            HashMap<String, Object> paramaters = new HashMap<>();
            paramaters.put("date", new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date));
            paramaters.put("id", id);
            paramaters.put("supplier", selectedSupplier);
            paramaters.put("required", new SimpleDateFormat("yyyy-MM-dd").format(jDateChooser1.getDate()));
            paramaters.put("items", jLabel6.getText());

            URL report = getClass().getResource("/com/cafe/reports/purchaseOrder.jasper");

            JasperPrint fillReport = JasperFillManager.fillReport(report.getPath(), paramaters, new JRTableModelDataSource(jTable1.getModel()));

            JasperViewer viewer = new JasperViewer(fillReport, false);
            viewer.setAlwaysOnTop(true);
            viewer.setVisible(true);
        } catch (JRException ex) {
            Splash.logger.log(Level.SEVERE, null, ex);
            ex.printStackTrace();
            return false;
        }
        return true;
    }

    private void resetOrder() {
        itemMap.clear();
        loadTable();
        jTextField1.setText("");
        jLabel8.setText("Not Selected");
        jDateChooser1.setDate(new Date());
        setSelectedItem(null);
        selectedSupplier = "";
        quantity = "1";
        jButton1.setText(quantity);
        jTextField2.setText("");
    }

    private void resetItem() {
        jTextField2.setText("");
        quantity = "1";
        jButton1.setText(quantity);
        selectedItem = null;
    }

    private void loadHistory() {
        ResultSet result = Mysql.execute("SELECT * FROM purchase_order "
                + "INNER JOIN order_state ON order_state.id = order_state_id "
                + "WHERE purchase_order.id LIKE '" + jTextField3.getText().trim() + "%' "
                + "AND order_date LIKE '" + jTextField5.getText().trim() + "%' "
                + "AND supplier_mobile LIKE '" + jTextField4.getText().trim() + "%' "
                + "AND order_state_id LIKE '" + stateMap.get(String.valueOf(jComboBox1.getSelectedItem())) + "%'");
        try {
            DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
            model.setRowCount(0);
            while (result.next()) {
                Vector v = new Vector();
                v.add(result.getString("id"));
                v.add(result.getString("order_date"));
                v.add(result.getString("required_date"));
                v.add(result.getString("supplier_mobile"));
                v.add(result.getString("order_state.name"));
                model.addRow(v);
            }

        } catch (SQLException ex) {
            Splash.logger.log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
    }

    private synchronized void showHistory() {
        jPanel8.add(jPanel16, BorderLayout.WEST);
        jPanel8.remove(jPanel1);
        SwingUtilities.updateComponentTreeUI(jPanel8);
    }

    private synchronized void hideHistory() {
        jPanel8.remove(jPanel16);
        jPanel8.add(jPanel1, BorderLayout.EAST);
        SwingUtilities.updateComponentTreeUI(jPanel8);
    }

    private HashMap<String, String> stateMap = new HashMap<>();

    private void loadOrderStateList() {
        ResultSet result = Mysql.execute("SELECT * FROM order_state");

        try {
            Vector v = new Vector();
            v.add("Select status");
            stateMap.put("Select status", "");
            while (result.next()) {
                v.add(result.getString("name"));
                stateMap.put(result.getString("name"), result.getString("id"));
            }
            jComboBox1.setModel(new DefaultComboBoxModel<>(v));
        } catch (SQLException ex) {
            Splash.logger.log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
    }

    private void loadItemList() {
        ResultSet result = Mysql.execute("SELECT * FROM purchase_order_item "
                + "INNER JOIN unit_of_measure ON purchase_order_item.unit_of_measure_id = unit_of_measure.id "
                + "WHERE purchase_order_item.purchase_order_id = '" + String.valueOf(jTable2.getValueAt(jTable2.getSelectedRow(), 0)) + "'");

        try {
            DefaultTableModel model = (DefaultTableModel) jTable3.getModel();
            model.setRowCount(0);
            while (result.next()) {
                Vector v = new Vector();
                v.add(result.getString("id"));
                v.add(result.getString("name"));
                v.add(result.getString("unit_of_measure.name"));
                v.add(result.getString("qty"));
                model.addRow(v);
            }
        } catch (SQLException ex) {
            Splash.logger.log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
    }

}
