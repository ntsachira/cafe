/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.cafe.gui;

import com.cafe.model.Mysql;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.io.File;
import java.net.URL;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Dell
 */
public class Reports extends javax.swing.JPanel {

    HashMap<String, String> menuCategoryMap = new HashMap<>();
    HashMap<String, String> brandMap = new HashMap<>();
    private Dashboard dashboard;
    private JComponent emptyLabel;

    public Dashboard getDashboard() {
        return dashboard;
    }

    public void setDashboard(Dashboard dashboard) {
        this.dashboard = dashboard;
    }

    /**
     * Creates new form Reports
     */
    public Reports() {
        initComponents();
        setupComponents();
        loadData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        invoiceSummaryReport = new javax.swing.JRadioButton();
        InvoiceFullReport = new javax.swing.JRadioButton();
        salesByItem = new javax.swing.JRadioButton();
        salesByCategory = new javax.swing.JRadioButton();
        jPanel19 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jPanel22 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel25 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jComboBox5 = new javax.swing.JComboBox<>();
        jComboBox6 = new javax.swing.JComboBox<>();
        jPanel26 = new javax.swing.JPanel();
        jComboBox7 = new javax.swing.JComboBox<>();
        jPanel12 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jPanel18 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jPanel5 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jButton6 = new javax.swing.JButton();
        jPanel17 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel21 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();
        jPanel24 = new javax.swing.JPanel();
        jPanel44 = new javax.swing.JPanel();
        jComboBox3 = new javax.swing.JComboBox<>();
        jPanel39 = new javax.swing.JPanel();
        jPanel41 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jPanel42 = new javax.swing.JPanel();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel43 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jPanel35 = new javax.swing.JPanel();
        jPanel36 = new javax.swing.JPanel();
        directSellingStock = new javax.swing.JRadioButton();
        directSellingLimitedStock = new javax.swing.JRadioButton();
        directSellingExpireSoon = new javax.swing.JRadioButton();
        directSellingExpired = new javax.swing.JRadioButton();
        damagedStock = new javax.swing.JRadioButton();
        jPanel53 = new javax.swing.JPanel();
        jPanel55 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jComboBox2 = new javax.swing.JComboBox<>();
        jPanel28 = new javax.swing.JPanel();
        kitchenStock = new javax.swing.JRadioButton();
        kitchenStockLimitedStock = new javax.swing.JRadioButton();
        kitchenExpireSoon = new javax.swing.JRadioButton();
        kitchenExpired = new javax.swing.JRadioButton();
        jPanel56 = new javax.swing.JPanel();
        jSeparator4 = new javax.swing.JSeparator();
        jPanel57 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel33 = new javax.swing.JPanel();
        jPanel34 = new javax.swing.JPanel();
        jPanel37 = new javax.swing.JPanel();
        jPanel38 = new javax.swing.JPanel();
        grnSummary = new javax.swing.JRadioButton();
        grnFull = new javax.swing.JRadioButton();
        jPanel45 = new javax.swing.JPanel();
        jPanel46 = new javax.swing.JPanel();
        jPanel47 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jDateChooser3 = new com.toedter.calendar.JDateChooser();
        jPanel48 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jDateChooser4 = new com.toedter.calendar.JDateChooser();
        jPanel49 = new javax.swing.JPanel();
        jPanel50 = new javax.swing.JPanel();
        jComboBox4 = new javax.swing.JComboBox<>();
        jPanel51 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jCheckBox2 = new javax.swing.JCheckBox();
        jPanel52 = new javax.swing.JPanel();
        jSeparator3 = new javax.swing.JSeparator();
        jPanel58 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jPanel27 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 20, 10, 20));
        setLayout(new java.awt.BorderLayout());

        jTabbedPane1.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 0, 10, 0));
        jPanel1.setLayout(new java.awt.BorderLayout(20, 0));

        jPanel8.setPreferredSize(new java.awt.Dimension(400, 719));
        jPanel8.setLayout(new java.awt.BorderLayout(0, 20));

        jPanel9.setLayout(new java.awt.GridLayout(0, 1, 0, 20));

        jPanel10.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(null, "REPORT TYPE", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Semibold", 0, 14)), javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10))); // NOI18N
        jPanel10.setLayout(new java.awt.BorderLayout());

        jPanel11.setLayout(new java.awt.GridLayout(4, 0, 10, 10));

        buttonGroup1.add(invoiceSummaryReport);
        invoiceSummaryReport.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        invoiceSummaryReport.setSelected(true);
        invoiceSummaryReport.setText("Invoice Summary Report");
        invoiceSummaryReport.setIconTextGap(10);
        invoiceSummaryReport.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                invoiceSummaryReportItemStateChanged(evt);
            }
        });
        jPanel11.add(invoiceSummaryReport);

        buttonGroup1.add(InvoiceFullReport);
        InvoiceFullReport.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        InvoiceFullReport.setText("Invoice Full Report");
        InvoiceFullReport.setIconTextGap(10);
        InvoiceFullReport.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                InvoiceFullReportItemStateChanged(evt);
            }
        });
        jPanel11.add(InvoiceFullReport);

        buttonGroup1.add(salesByItem);
        salesByItem.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        salesByItem.setText("Sales By Item");
        salesByItem.setIconTextGap(10);
        salesByItem.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                salesByItemItemStateChanged(evt);
            }
        });
        jPanel11.add(salesByItem);

        buttonGroup1.add(salesByCategory);
        salesByCategory.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        salesByCategory.setText("Sales By Category");
        salesByCategory.setIconTextGap(10);
        salesByCategory.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                salesByCategoryItemStateChanged(evt);
            }
        });
        jPanel11.add(salesByCategory);

        jPanel10.add(jPanel11, java.awt.BorderLayout.CENTER);

        jPanel9.add(jPanel10);

        jPanel8.add(jPanel9, java.awt.BorderLayout.PAGE_START);

        jPanel19.setLayout(new java.awt.BorderLayout());

        jPanel20.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(null, "CASHIER", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Semibold", 0, 14)), javax.swing.BorderFactory.createEmptyBorder(15, 10, 15, 10))); // NOI18N
        jPanel20.setLayout(new java.awt.BorderLayout());

        jComboBox1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.setPreferredSize(new java.awt.Dimension(72, 40));
        jPanel20.add(jComboBox1, java.awt.BorderLayout.CENTER);

        jPanel19.add(jPanel20, java.awt.BorderLayout.NORTH);

        jPanel22.setLayout(new java.awt.BorderLayout());

        jPanel6.setMaximumSize(new java.awt.Dimension(32767, 97));
        jPanel6.setPreferredSize(new java.awt.Dimension(400, 97));
        jPanel6.setLayout(new java.awt.BorderLayout(0, 20));

        jPanel25.setMaximumSize(new java.awt.Dimension(32767, 97));
        jPanel25.setPreferredSize(new java.awt.Dimension(0, 200));
        jPanel25.setLayout(new java.awt.BorderLayout(0, 20));

        jPanel7.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(null, "ORDER BY", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Semibold", 0, 14)), javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10))); // NOI18N
        jPanel7.setMaximumSize(new java.awt.Dimension(2147483647, 87));
        jPanel7.setMinimumSize(new java.awt.Dimension(210, 0));
        jPanel7.setPreferredSize(new java.awt.Dimension(400, 90));
        jPanel7.setLayout(new java.awt.BorderLayout(20, 0));

        jComboBox5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jComboBox5.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Ordering Criteria", "Sold Amount", "Income" }));
        jComboBox5.setPreferredSize(new java.awt.Dimension(180, 40));
        jPanel7.add(jComboBox5, java.awt.BorderLayout.CENTER);

        jComboBox6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jComboBox6.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Order", "Ascending", "Descending" }));
        jComboBox6.setPreferredSize(new java.awt.Dimension(120, 40));
        jPanel7.add(jComboBox6, java.awt.BorderLayout.EAST);

        jPanel25.add(jPanel7, java.awt.BorderLayout.NORTH);

        jPanel26.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(null, "LIMIT", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Semibold", 0, 14)), javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10))); // NOI18N
        jPanel26.setMaximumSize(new java.awt.Dimension(2147483647, 100));
        jPanel26.setMinimumSize(new java.awt.Dimension(210, 0));
        jPanel26.setPreferredSize(new java.awt.Dimension(400, 90));
        jPanel26.setLayout(new java.awt.BorderLayout());

        jComboBox7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jComboBox7.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Results Limit", "Top 3", "Top 5", "Top 10" }));
        jComboBox7.setPreferredSize(new java.awt.Dimension(180, 40));
        jPanel26.add(jComboBox7, java.awt.BorderLayout.CENTER);

        jPanel25.add(jPanel26, java.awt.BorderLayout.CENTER);

        jPanel6.add(jPanel25, java.awt.BorderLayout.NORTH);

        jPanel12.setMaximumSize(new java.awt.Dimension(2147483647, 90));
        jPanel12.setMinimumSize(new java.awt.Dimension(214, 90));
        jPanel12.setPreferredSize(new java.awt.Dimension(420, 90));
        jPanel12.setLayout(new java.awt.BorderLayout());

        jPanel13.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(null, "DATE RANGE", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Semibold", 0, 14)), javax.swing.BorderFactory.createEmptyBorder(0, 10, 10, 10))); // NOI18N
        jPanel13.setMaximumSize(new java.awt.Dimension(32767, 70));
        jPanel13.setLayout(new java.awt.GridLayout(1, 2, 20, 10));

        jPanel14.setMinimumSize(new java.awt.Dimension(82, 70));
        jPanel14.setPreferredSize(new java.awt.Dimension(185, 70));
        jPanel14.setLayout(new java.awt.BorderLayout());

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Start Date");
        jLabel2.setPreferredSize(new java.awt.Dimension(37, 30));
        jPanel14.add(jLabel2, java.awt.BorderLayout.PAGE_START);

        jDateChooser2.setDateFormatString("yyyy-MM-dd");
        jDateChooser2.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jDateChooser2.setOpaque(false);
        jDateChooser2.setPreferredSize(new java.awt.Dimension(88, 40));
        jDateChooser2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jDateChooser2MouseExited(evt);
            }
        });
        jPanel14.add(jDateChooser2, java.awt.BorderLayout.CENTER);

        jPanel13.add(jPanel14);

        jPanel18.setMinimumSize(new java.awt.Dimension(82, 70));
        jPanel18.setPreferredSize(new java.awt.Dimension(185, 70));
        jPanel18.setLayout(new java.awt.BorderLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("End Date");
        jLabel1.setPreferredSize(new java.awt.Dimension(37, 30));
        jPanel18.add(jLabel1, java.awt.BorderLayout.PAGE_START);

        jDateChooser1.setDateFormatString("yyyy-MM-dd");
        jDateChooser1.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jDateChooser1.setPreferredSize(new java.awt.Dimension(88, 40));
        jDateChooser1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jDateChooser1MouseExited(evt);
            }
        });
        jPanel18.add(jDateChooser1, java.awt.BorderLayout.CENTER);

        jPanel13.add(jPanel18);

        jPanel12.add(jPanel13, java.awt.BorderLayout.NORTH);

        jPanel5.setPreferredSize(new java.awt.Dimension(304, 110));

        jButton1.setBackground(new java.awt.Color(77, 120, 204));
        jButton1.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("GENERATE REPORT");
        jButton1.setBorderPainted(false);
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.setPreferredSize(new java.awt.Dimension(75, 48));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jCheckBox1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jCheckBox1.setText("All Records");
        jCheckBox1.setIconTextGap(10);

        jButton6.setBackground(new java.awt.Color(102, 102, 102));
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cafe/img/refresh.png"))); // NOI18N
        jButton6.setBorderPainted(false);
        jButton6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton6.setPreferredSize(new java.awt.Dimension(48, 48));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jCheckBox1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(102, Short.MAX_VALUE)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox1)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel12.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel6.add(jPanel12, java.awt.BorderLayout.CENTER);

        jPanel22.add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel19.add(jPanel22, java.awt.BorderLayout.CENTER);

        jPanel8.add(jPanel19, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel8, java.awt.BorderLayout.LINE_START);

        jPanel17.setLayout(new java.awt.BorderLayout());

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel17.add(jSeparator1, java.awt.BorderLayout.LINE_START);

        jPanel21.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 20, 1, 20));
        jPanel21.setLayout(new java.awt.BorderLayout());

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Your Report Will be Diplayed Here");
        jPanel21.add(jLabel5, java.awt.BorderLayout.CENTER);

        jPanel17.add(jPanel21, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel17, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("SALES", jPanel1);

        jPanel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 0, 10, 0));
        jPanel2.setLayout(new java.awt.BorderLayout(20, 0));

        jPanel23.setPreferredSize(new java.awt.Dimension(400, 719));
        jPanel23.setLayout(new java.awt.BorderLayout(0, 20));

        jPanel24.setLayout(new java.awt.GridLayout(0, 1, 0, 20));

        jPanel44.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(null, "ITEM CATEGORY", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Semibold", 0, 14)), javax.swing.BorderFactory.createEmptyBorder(15, 10, 15, 10))); // NOI18N
        jPanel44.setLayout(new java.awt.BorderLayout());

        jComboBox3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox3.setPreferredSize(new java.awt.Dimension(72, 40));
        jPanel44.add(jComboBox3, java.awt.BorderLayout.CENTER);

        jPanel24.add(jPanel44);

        jPanel23.add(jPanel24, java.awt.BorderLayout.PAGE_START);

        jPanel39.setLayout(new java.awt.BorderLayout());

        jButton2.setBackground(new java.awt.Color(77, 120, 204));
        jButton2.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("GENERATE REPORT");
        jButton2.setBorderPainted(false);
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.setPreferredSize(new java.awt.Dimension(75, 48));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton7.setBackground(new java.awt.Color(102, 102, 102));
        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cafe/img/refresh.png"))); // NOI18N
        jButton7.setBorderPainted(false);
        jButton7.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton7.setPreferredSize(new java.awt.Dimension(48, 48));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel41Layout = new javax.swing.GroupLayout(jPanel41);
        jPanel41.setLayout(jPanel41Layout);
        jPanel41Layout.setHorizontalGroup(
            jPanel41Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel41Layout.createSequentialGroup()
                .addContainerGap(121, Short.MAX_VALUE)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel41Layout.setVerticalGroup(
            jPanel41Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel41Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel41Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(560, Short.MAX_VALUE))
        );

        jPanel39.add(jPanel41, java.awt.BorderLayout.CENTER);

        jPanel23.add(jPanel39, java.awt.BorderLayout.CENTER);

        jPanel2.add(jPanel23, java.awt.BorderLayout.LINE_START);

        jPanel42.setLayout(new java.awt.BorderLayout());

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel42.add(jSeparator2, java.awt.BorderLayout.LINE_START);

        jPanel43.setLayout(new java.awt.BorderLayout());

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Your Report Will be Diplayed Here");
        jPanel43.add(jLabel6, java.awt.BorderLayout.CENTER);

        jPanel42.add(jPanel43, java.awt.BorderLayout.CENTER);

        jPanel2.add(jPanel42, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("MENU", jPanel2);

        jPanel3.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 0, 10, 0));
        jPanel3.setLayout(new java.awt.BorderLayout(20, 0));

        jPanel15.setPreferredSize(new java.awt.Dimension(400, 719));
        jPanel15.setLayout(new java.awt.BorderLayout(0, 20));

        jPanel16.setLayout(new java.awt.GridLayout(0, 1, 0, 20));

        jPanel35.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(null, "REPORT TYPE", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Semibold", 0, 14)), javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10))); // NOI18N
        jPanel35.setLayout(new java.awt.BorderLayout());

        jPanel36.setLayout(new java.awt.GridLayout(9, 1, 0, 10));

        buttonGroup2.add(directSellingStock);
        directSellingStock.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        directSellingStock.setSelected(true);
        directSellingStock.setText("Dirrect Selling Stock ");
        directSellingStock.setIconTextGap(10);
        directSellingStock.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                directSellingStockItemStateChanged(evt);
            }
        });
        jPanel36.add(directSellingStock);

        buttonGroup2.add(directSellingLimitedStock);
        directSellingLimitedStock.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        directSellingLimitedStock.setText("Dirrect Selling Limited Stock");
        directSellingLimitedStock.setIconTextGap(10);
        directSellingLimitedStock.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                directSellingLimitedStockItemStateChanged(evt);
            }
        });
        jPanel36.add(directSellingLimitedStock);

        buttonGroup2.add(directSellingExpireSoon);
        directSellingExpireSoon.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        directSellingExpireSoon.setText("Dirrect Selling Expire Soon Stock");
        directSellingExpireSoon.setIconTextGap(10);
        directSellingExpireSoon.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                directSellingExpireSoonItemStateChanged(evt);
            }
        });
        directSellingExpireSoon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                directSellingExpireSoonActionPerformed(evt);
            }
        });
        jPanel36.add(directSellingExpireSoon);

        buttonGroup2.add(directSellingExpired);
        directSellingExpired.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        directSellingExpired.setText("Dirrect Selling Expired Stock");
        directSellingExpired.setIconTextGap(10);
        directSellingExpired.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                directSellingExpiredItemStateChanged(evt);
            }
        });
        jPanel36.add(directSellingExpired);

        buttonGroup2.add(damagedStock);
        damagedStock.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        damagedStock.setText("Damaged Stock");
        damagedStock.setIconTextGap(10);
        damagedStock.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                damagedStockItemStateChanged(evt);
            }
        });
        jPanel36.add(damagedStock);

        jPanel35.add(jPanel36, java.awt.BorderLayout.CENTER);

        jPanel16.add(jPanel35);

        jPanel15.add(jPanel16, java.awt.BorderLayout.PAGE_START);

        jPanel53.setLayout(new java.awt.BorderLayout());

        jPanel55.setPreferredSize(new java.awt.Dimension(400, 48));
        jPanel55.setLayout(new java.awt.BorderLayout(10, 0));

        jButton4.setBackground(new java.awt.Color(77, 120, 204));
        jButton4.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("GENERATE REPORT");
        jButton4.setBorderPainted(false);
        jButton4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton4.setPreferredSize(new java.awt.Dimension(75, 48));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel55.add(jButton4, java.awt.BorderLayout.CENTER);

        jButton8.setBackground(new java.awt.Color(102, 102, 102));
        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cafe/img/refresh.png"))); // NOI18N
        jButton8.setBorderPainted(false);
        jButton8.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton8.setPreferredSize(new java.awt.Dimension(48, 48));
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel55.add(jButton8, java.awt.BorderLayout.EAST);

        jComboBox2.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "6", "10", "20" }));
        jComboBox2.setSelectedIndex(1);
        jComboBox2.setToolTipText("Select limit");
        jComboBox2.setPreferredSize(new java.awt.Dimension(72, 48));
        jPanel55.add(jComboBox2, java.awt.BorderLayout.WEST);

        jPanel53.add(jPanel55, java.awt.BorderLayout.NORTH);

        buttonGroup2.add(kitchenStock);
        kitchenStock.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        kitchenStock.setText("Kitchen Stock");
        kitchenStock.setIconTextGap(10);
        kitchenStock.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                kitchenStockItemStateChanged(evt);
            }
        });
        kitchenStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kitchenStockActionPerformed(evt);
            }
        });

        buttonGroup2.add(kitchenStockLimitedStock);
        kitchenStockLimitedStock.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        kitchenStockLimitedStock.setText("Kitchen Stock Limited Stock");
        kitchenStockLimitedStock.setIconTextGap(10);
        kitchenStockLimitedStock.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                kitchenStockLimitedStockItemStateChanged(evt);
            }
        });

        buttonGroup2.add(kitchenExpireSoon);
        kitchenExpireSoon.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        kitchenExpireSoon.setText("Kitchen Expire Soon Stock");
        kitchenExpireSoon.setIconTextGap(10);
        kitchenExpireSoon.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                kitchenExpireSoonItemStateChanged(evt);
            }
        });

        buttonGroup2.add(kitchenExpired);
        kitchenExpired.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        kitchenExpired.setText("Kitchen Expired Stock");
        kitchenExpired.setIconTextGap(10);
        kitchenExpired.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                kitchenExpiredItemStateChanged(evt);
            }
        });
        kitchenExpired.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kitchenExpiredActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel28Layout = new javax.swing.GroupLayout(jPanel28);
        jPanel28.setLayout(jPanel28Layout);
        jPanel28Layout.setHorizontalGroup(
            jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel28Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(kitchenStock, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kitchenStockLimitedStock, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kitchenExpireSoon, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kitchenExpired, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel28Layout.setVerticalGroup(
            jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel28Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(kitchenStock)
                .addGap(10, 10, 10)
                .addComponent(kitchenStockLimitedStock)
                .addGap(10, 10, 10)
                .addComponent(kitchenExpireSoon)
                .addGap(10, 10, 10)
                .addComponent(kitchenExpired)
                .addContainerGap(112, Short.MAX_VALUE))
        );

        jPanel53.add(jPanel28, java.awt.BorderLayout.CENTER);

        jPanel15.add(jPanel53, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel15, java.awt.BorderLayout.LINE_START);

        jPanel56.setLayout(new java.awt.BorderLayout());

        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel56.add(jSeparator4, java.awt.BorderLayout.LINE_START);

        jPanel57.setLayout(new java.awt.BorderLayout());

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Your Report Will be Diplayed Here");
        jPanel57.add(jLabel7, java.awt.BorderLayout.CENTER);

        jPanel56.add(jPanel57, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel56, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("STOCK", jPanel3);

        jPanel4.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 0, 10, 0));
        jPanel4.setLayout(new java.awt.BorderLayout(20, 0));

        jPanel33.setPreferredSize(new java.awt.Dimension(400, 719));
        jPanel33.setLayout(new java.awt.BorderLayout(0, 20));

        jPanel34.setLayout(new java.awt.GridLayout(0, 1, 0, 20));

        jPanel37.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(null, "REPORT TYPE", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Semibold", 0, 14)), javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10))); // NOI18N
        jPanel37.setLayout(new java.awt.BorderLayout());

        jPanel38.setLayout(new java.awt.GridLayout(2, 0, 0, 10));

        buttonGroup3.add(grnSummary);
        grnSummary.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        grnSummary.setSelected(true);
        grnSummary.setText("GRN Summary Report");
        grnSummary.setIconTextGap(10);
        grnSummary.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                grnSummaryItemStateChanged(evt);
            }
        });
        jPanel38.add(grnSummary);

        buttonGroup3.add(grnFull);
        grnFull.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        grnFull.setText("GRN Full Report");
        grnFull.setIconTextGap(10);
        grnFull.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                grnFullItemStateChanged(evt);
            }
        });
        jPanel38.add(grnFull);

        jPanel37.add(jPanel38, java.awt.BorderLayout.CENTER);

        jPanel34.add(jPanel37);

        jPanel45.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(null, "DATE RANGE", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Semibold", 0, 14)), javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10))); // NOI18N
        jPanel45.setLayout(new java.awt.BorderLayout());

        jPanel46.setLayout(new java.awt.GridLayout(1, 2, 20, 10));

        jPanel47.setPreferredSize(new java.awt.Dimension(185, 70));
        jPanel47.setLayout(new java.awt.BorderLayout());

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Start Date");
        jLabel3.setPreferredSize(new java.awt.Dimension(37, 30));
        jPanel47.add(jLabel3, java.awt.BorderLayout.PAGE_START);

        jDateChooser3.setDateFormatString("yyyy-MM-dd");
        jDateChooser3.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jDateChooser3.setMinimumSize(new java.awt.Dimension(82, 40));
        jDateChooser3.setPreferredSize(new java.awt.Dimension(88, 40));
        jPanel47.add(jDateChooser3, java.awt.BorderLayout.CENTER);

        jPanel46.add(jPanel47);

        jPanel48.setPreferredSize(new java.awt.Dimension(185, 70));
        jPanel48.setLayout(new java.awt.BorderLayout());

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("End Date");
        jLabel4.setPreferredSize(new java.awt.Dimension(37, 30));
        jPanel48.add(jLabel4, java.awt.BorderLayout.PAGE_START);

        jDateChooser4.setDateFormatString("yyyy-MM-dd");
        jDateChooser4.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jDateChooser4.setMinimumSize(new java.awt.Dimension(82, 40));
        jDateChooser4.setPreferredSize(new java.awt.Dimension(88, 40));
        jPanel48.add(jDateChooser4, java.awt.BorderLayout.CENTER);

        jPanel46.add(jPanel48);

        jPanel45.add(jPanel46, java.awt.BorderLayout.CENTER);

        jPanel34.add(jPanel45);

        jPanel33.add(jPanel34, java.awt.BorderLayout.PAGE_START);

        jPanel49.setLayout(new java.awt.BorderLayout());

        jPanel50.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(null, "SUPPLIER", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Semibold", 0, 14)), javax.swing.BorderFactory.createEmptyBorder(15, 10, 15, 10))); // NOI18N
        jPanel50.setLayout(new java.awt.BorderLayout());

        jComboBox4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox4.setPreferredSize(new java.awt.Dimension(72, 40));
        jPanel50.add(jComboBox4, java.awt.BorderLayout.CENTER);

        jPanel49.add(jPanel50, java.awt.BorderLayout.PAGE_START);

        jButton3.setBackground(new java.awt.Color(77, 120, 204));
        jButton3.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("GENERATE REPORT");
        jButton3.setBorderPainted(false);
        jButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton3.setPreferredSize(new java.awt.Dimension(75, 48));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton9.setBackground(new java.awt.Color(102, 102, 102));
        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cafe/img/refresh.png"))); // NOI18N
        jButton9.setBorderPainted(false);
        jButton9.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton9.setPreferredSize(new java.awt.Dimension(48, 48));
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jCheckBox2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jCheckBox2.setText("All Records");
        jCheckBox2.setIconTextGap(10);

        javax.swing.GroupLayout jPanel51Layout = new javax.swing.GroupLayout(jPanel51);
        jPanel51.setLayout(jPanel51Layout);
        jPanel51Layout.setHorizontalGroup(
            jPanel51Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel51Layout.createSequentialGroup()
                .addContainerGap(121, Short.MAX_VALUE)
                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel51Layout.createSequentialGroup()
                .addComponent(jCheckBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel51Layout.setVerticalGroup(
            jPanel51Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel51Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel51Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(276, Short.MAX_VALUE))
        );

        jPanel49.add(jPanel51, java.awt.BorderLayout.CENTER);

        jPanel33.add(jPanel49, java.awt.BorderLayout.CENTER);

        jPanel4.add(jPanel33, java.awt.BorderLayout.LINE_START);

        jPanel52.setLayout(new java.awt.BorderLayout());

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel52.add(jSeparator3, java.awt.BorderLayout.LINE_START);

        jPanel58.setLayout(new java.awt.BorderLayout());

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Your Report Will be Diplayed Here");
        jPanel58.add(jLabel8, java.awt.BorderLayout.CENTER);

        jPanel52.add(jPanel58, java.awt.BorderLayout.CENTER);

        jPanel4.add(jPanel52, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("GRN", jPanel4);

        add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        jPanel27.setPreferredSize(new java.awt.Dimension(1102, 30));
        jPanel27.setLayout(new java.awt.BorderLayout());

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cafe/img/clear.png"))); // NOI18N
        jButton5.setBorderPainted(false);
        jButton5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel27.add(jButton5, java.awt.BorderLayout.LINE_END);

        add(jPanel27, java.awt.BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        resetGrnTab();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        generateGrnReport();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void grnFullItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_grnFullItemStateChanged
        // TODO add your handling code here:
        resetGrnTab();
    }//GEN-LAST:event_grnFullItemStateChanged

    private void grnSummaryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_grnSummaryItemStateChanged
        // TODO add your handling code here:
        resetGrnTab();
    }//GEN-LAST:event_grnSummaryItemStateChanged

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        resetSTockTab();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        generateStockReport();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void damagedStockItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_damagedStockItemStateChanged
        // TODO add your handling code here:
        resetSTockTab();
    }//GEN-LAST:event_damagedStockItemStateChanged

    private void kitchenStockLimitedStockItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_kitchenStockLimitedStockItemStateChanged
        // TODO add your handling code here:
        resetSTockTab();
        if (kitchenStockLimitedStock.isSelected()) {
            jPanel55.add(jComboBox2, BorderLayout.WEST);
        }
    }//GEN-LAST:event_kitchenStockLimitedStockItemStateChanged

    private void kitchenStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kitchenStockActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_kitchenStockActionPerformed

    private void kitchenStockItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_kitchenStockItemStateChanged
        // TODO add your handling code here:
        resetSTockTab();
        if (kitchenStock.isSelected()) {
            jPanel55.remove(jComboBox2);
        }
    }//GEN-LAST:event_kitchenStockItemStateChanged

    private void directSellingLimitedStockItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_directSellingLimitedStockItemStateChanged
        // TODO add your handling code here:
        resetSTockTab();
        if (directSellingLimitedStock.isSelected()) {
            jPanel55.add(jComboBox2, BorderLayout.WEST);
        }
    }//GEN-LAST:event_directSellingLimitedStockItemStateChanged

    private void directSellingStockItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_directSellingStockItemStateChanged
        // TODO add your handling code here:
        resetSTockTab();
        if (directSellingStock.isSelected()) {
            jPanel55.remove(jComboBox2);
        }
    }//GEN-LAST:event_directSellingStockItemStateChanged

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        resetMenuTab();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        generateMenuReport();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        resetSalesTab();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:        
        generateSalesReport();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jDateChooser1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jDateChooser1MouseExited
        // TODO add your handling code here:
        setupSalesDateChoosers();
    }//GEN-LAST:event_jDateChooser1MouseExited

    private void jDateChooser2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jDateChooser2MouseExited
        // TODO add your handling code here:
        setupSalesDateChoosers();
    }//GEN-LAST:event_jDateChooser2MouseExited

    private void salesByCategoryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_salesByCategoryItemStateChanged
        // TODO add your handling code here:
        resetSalesTab();
        if (salesByCategory.isSelected()) {
            jComboBox1.setEnabled(false);
            jComboBox1.setSelectedIndex(0);
            hideCashierSelector();
            showSort();
        } else {
            jComboBox1.setEnabled(true);
        }
    }//GEN-LAST:event_salesByCategoryItemStateChanged

    private void salesByItemItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_salesByItemItemStateChanged
        // TODO add your handling code here:
        resetSalesTab();
        if (salesByItem.isSelected()) {
            jComboBox1.setEnabled(false);
            jComboBox1.setSelectedIndex(0);
            hideCashierSelector();
            showSort();
            showLimitSelect();
        } else {
            jComboBox1.setEnabled(true);
        }
    }//GEN-LAST:event_salesByItemItemStateChanged

    private void InvoiceFullReportItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_InvoiceFullReportItemStateChanged
        // TODO add your handling code here:
        resetSalesTab();
        if (InvoiceFullReport.isSelected()) {
            showCashierSelector();
            hideSort();
        }
    }//GEN-LAST:event_InvoiceFullReportItemStateChanged

    private void invoiceSummaryReportItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_invoiceSummaryReportItemStateChanged
        // TODO add your handling code here:
        resetSalesTab();
        if (invoiceSummaryReport.isSelected()) {
            showCashierSelector();
            hideSort();
        }
    }//GEN-LAST:event_invoiceSummaryReportItemStateChanged

    private void kitchenExpiredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kitchenExpiredActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_kitchenExpiredActionPerformed

    private void directSellingExpireSoonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_directSellingExpireSoonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_directSellingExpireSoonActionPerformed

    private void directSellingExpireSoonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_directSellingExpireSoonItemStateChanged
        // TODO add your handling code here:
        resetSTockTab();
        if (directSellingExpireSoon.isSelected()) {
            jPanel55.remove(jComboBox2);
        }
    }//GEN-LAST:event_directSellingExpireSoonItemStateChanged

    private void directSellingExpiredItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_directSellingExpiredItemStateChanged
        // TODO add your handling code here:
        resetSTockTab();
        if (directSellingExpired.isSelected()) {
            jPanel55.remove(jComboBox2);
        }
    }//GEN-LAST:event_directSellingExpiredItemStateChanged

    private void kitchenExpireSoonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_kitchenExpireSoonItemStateChanged
        // TODO add your handling code here:
        resetSTockTab();
        if (kitchenExpireSoon.isSelected()) {
            jPanel55.remove(jComboBox2);
        }
    }//GEN-LAST:event_kitchenExpireSoonItemStateChanged

    private void kitchenExpiredItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_kitchenExpiredItemStateChanged
        // TODO add your handling code here:
        resetSTockTab();
        if (kitchenExpired.isSelected()) {
            jPanel55.remove(jComboBox2);
        }
    }//GEN-LAST:event_kitchenExpiredItemStateChanged

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        dashboard.setAnalytics();
    }//GEN-LAST:event_jButton5ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton InvoiceFullReport;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.JRadioButton damagedStock;
    private javax.swing.JRadioButton directSellingExpireSoon;
    private javax.swing.JRadioButton directSellingExpired;
    private javax.swing.JRadioButton directSellingLimitedStock;
    private javax.swing.JRadioButton directSellingStock;
    private javax.swing.JRadioButton grnFull;
    private javax.swing.JRadioButton grnSummary;
    private javax.swing.JRadioButton invoiceSummaryReport;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox<String> jComboBox4;
    private javax.swing.JComboBox<String> jComboBox5;
    private javax.swing.JComboBox<String> jComboBox6;
    private javax.swing.JComboBox<String> jComboBox7;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private com.toedter.calendar.JDateChooser jDateChooser3;
    private com.toedter.calendar.JDateChooser jDateChooser4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel36;
    private javax.swing.JPanel jPanel37;
    private javax.swing.JPanel jPanel38;
    private javax.swing.JPanel jPanel39;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel42;
    private javax.swing.JPanel jPanel43;
    private javax.swing.JPanel jPanel44;
    private javax.swing.JPanel jPanel45;
    private javax.swing.JPanel jPanel46;
    private javax.swing.JPanel jPanel47;
    private javax.swing.JPanel jPanel48;
    private javax.swing.JPanel jPanel49;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel50;
    private javax.swing.JPanel jPanel51;
    private javax.swing.JPanel jPanel52;
    private javax.swing.JPanel jPanel53;
    private javax.swing.JPanel jPanel55;
    private javax.swing.JPanel jPanel56;
    private javax.swing.JPanel jPanel57;
    private javax.swing.JPanel jPanel58;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JRadioButton kitchenExpireSoon;
    private javax.swing.JRadioButton kitchenExpired;
    private javax.swing.JRadioButton kitchenStock;
    private javax.swing.JRadioButton kitchenStockLimitedStock;
    private javax.swing.JRadioButton salesByCategory;
    private javax.swing.JRadioButton salesByItem;
    // End of variables declaration//GEN-END:variables

    private void generateSalesReport() {
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
        String today = formatter.format(new Date());

        String cashier = "";
        String from = "";
        String to = "";

        if (jComboBox1.getSelectedIndex() != 0) {
            cashier = String.valueOf(jComboBox1.getSelectedItem()).split(" - ")[0];
        }

        if (jCheckBox1.isSelected()) {
            from = today;
            to = "2024-04-01";
        } else {
            if (jDateChooser1.getDate() != null && jDateChooser2.getDate() != null) {
                from = formatter.format(jDateChooser2.getDate());
                to = formatter.format(jDateChooser1.getDate());
            }
        }

        if ((jDateChooser1.getDate() == null || jDateChooser2.getDate() == null) && !jCheckBox1.isSelected()) {
            JOptionPane.showMessageDialog(this, "Please select valid Dates, Otherwise Tick the check box for All records", "Warning!", JOptionPane.WARNING_MESSAGE);
        } else {
            HashMap<String, Object> parameters = new HashMap<>();
            parameters.put("cashier", cashier);
            parameters.put("to", to);
            parameters.put("from", from);
            if (invoiceSummaryReport.isSelected()) {
                printInvoiceSummaryReport(parameters, today);
            } else if (InvoiceFullReport.isSelected()) {
                printInvoiceFullReport(parameters, today);
            } else if (salesByItem.isSelected()) {
                printSalesByItemReport(parameters, today);
            } else if (salesByCategory.isSelected()) {
                printSalesByCategoryReport(parameters);
            }
        }

    }

    private void setupComponents() {
        setupDatechooserComponents();
        setupDefaultComponentVisibility();
        jPanel55.remove(jComboBox2);
    }

    private void setupSalesDateChoosers() {
        if (jDateChooser1.getDate() != null && jDateChooser2.getDate() != null) {
            jDateChooser1.setMaxSelectableDate(new Date(jDateChooser2.getDate().getTime() - 1000 * 60 * 60 * 24));
            if (jDateChooser2.getDate().before(jDateChooser1.getDate())) {
                jDateChooser1.setDate(new Date(jDateChooser2.getDate().getTime() - 1000 * 60 * 60 * 24));
            }
        } else if (jDateChooser1.getDate() == null && jDateChooser2.getDate() != null) {
            jDateChooser1.setDate(new Date(jDateChooser2.getDate().getTime() - 1000 * 60 * 60 * 24));
        }
        jDateChooser2.getComponent(1).setForeground(new Color(77, 120, 204));
        jDateChooser1.getComponent(1).setForeground(new Color(77, 120, 204));
    }

    private void setupGrnDateChoosers() {
        if (jDateChooser4.getDate() != null && jDateChooser3.getDate() != null) {
            jDateChooser4.setMaxSelectableDate(new Date(jDateChooser3.getDate().getTime() - 1000 * 60 * 60 * 24));
            if (jDateChooser3.getDate().before(jDateChooser4.getDate())) {
                jDateChooser4.setDate(new Date(jDateChooser3.getDate().getTime() - 1000 * 60 * 60 * 24));
            }
        } else if (jDateChooser4.getDate() == null && jDateChooser3.getDate() != null) {
            jDateChooser4.setDate(new Date(jDateChooser3.getDate().getTime() - 1000 * 60 * 60 * 24));
        }
        jDateChooser3.getComponent(1).setForeground(new Color(77, 120, 204));
        jDateChooser4.getComponent(1).setForeground(new Color(77, 120, 204));
    }

    private void loadCashierList() {
        try {
            ResultSet result = Mysql.execute("SELECT display_name,mobile,role_name FROM user INNER JOIN user_role ON user.user_role_id = user_role.id ");
            Vector v = new Vector();
            v.add("Select cashier");
            while (result.next()) {
                v.add(result.getString("mobile") + " - " + result.getString("display_name"));
            }
            jComboBox1.setModel(new DefaultComboBoxModel(v));
        } catch (SQLException ex) {
            Splash.logger.log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
    }

    private void printInvoiceSummaryReport(HashMap<String, Object> parameters, String today) {
        String cashier = "";
        if (jComboBox1.getSelectedIndex() != 0) {
            cashier = String.valueOf(jComboBox1.getSelectedItem()).split(" - ")[0];
        }

        try {
            File mainReport = new File(System.getProperty("user.dir") + File.separator + "reports/cafe_invoice_summary.jasper");
            if (!mainReport.exists()) {
                JOptionPane.showMessageDialog(jPanel21, "Report file not found! Please contact support", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            ResultSet result = Mysql.execute("SELECT COUNT(id) AS `count` ,SUM(invoice.total) AS total FROM  invoice "
                    + "INNER JOIN `user` ON user.mobile = invoice.user_mobile "
                    + "WHERE `date` >=  '" + parameters.get("to") + "' AND `date` <=  '" + parameters.get("from") + "'  AND `user_mobile` LIKE  '" + cashier + "%'");

            if (result.next()) {
                parameters.put("printDate", today);
                parameters.put("netTotal", "Rs. " + new DecimalFormat("#,##0.00").format(result.getDouble("total")));
            }
            JasperPrint fillReport = JasperFillManager.fillReport(mainReport.getPath(), parameters, Mysql.getConnection());

            if (fillReport.getPages().size() > 0) {
                JasperViewer viewer = new JasperViewer(fillReport, false);
                jPanel21.removeAll();
                jPanel21.add(viewer.getRootPane());
                jPanel21.updateUI();
            } else {

                resetSalesTab("No records found.");
            }

        } catch (JRException ex) {
            Splash.logger.log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        } catch (SQLException ex) {
            Splash.logger.log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
    }

    private void printInvoiceFullReport(HashMap<String, Object> parameters, String today) {
        File resource = new File(System.getProperty("user.dir") + File.separator + "reports/main_report.jasper");
        File resourceSub = new File(System.getProperty("user.dir") + File.separator + "reports/sub_report.jasper");
        if (!resource.exists() || !resourceSub.exists()) {
            JOptionPane.showMessageDialog(jPanel21, "Report file not found! Please contact support", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String cashier = "";
        if (jComboBox1.getSelectedIndex() != 0) {
            cashier = String.valueOf(jComboBox1.getSelectedItem()).split(" - ")[0];
        }

        try {

            ResultSet result = Mysql.execute("SELECT COUNT(id) AS `count` ,SUM(invoice.total) AS total FROM  invoice "
                    + "INNER JOIN `user` ON user.mobile = invoice.user_mobile "
                    + "WHERE `date` >=  '" + parameters.get("to") + "' AND `date` <=  '" + parameters.get("from") + "'  AND `user_mobile` LIKE  '" + cashier + "%'");

            if (result.next()) {
                parameters.put("total", new DecimalFormat("#,###.00").format(result.getDouble("total")));
            }

            JasperFillManager.fillReport(resourceSub.getPath(), parameters, Mysql.getConnection());
            JasperPrint fillReport = JasperFillManager.fillReport(resource.getPath(), parameters, Mysql.getConnection());
            if (fillReport.getPages().size() > 0) {
                JasperViewer viewer = new JasperViewer(fillReport, false);
                jPanel21.removeAll();
                jPanel21.add(viewer.getRootPane());
                jPanel21.updateUI();
            } else {
                resetSalesTab("No records found.");
            }

        } catch (JRException ex) {
            Splash.logger.log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        } catch (SQLException ex) {
            Splash.logger.log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
    }

    private void resetSalesTab() {
        jPanel21.removeAll();
        jPanel21.add(jLabel5);
        jLabel5.setText("Your Report Will be Diplayed Here");
        jPanel21.updateUI();
    }

    private void resetSalesTab(String message) {
        jPanel21.removeAll();
        jPanel21.add(jLabel5);
        jLabel5.setText(message);
        jPanel21.updateUI();
        JOptionPane.showMessageDialog(jPanel21, message, "Warning!", JOptionPane.WARNING_MESSAGE);
    }

    private void printSalesByItemReport(HashMap<String, Object> parameters, String today) {
        String sortField = "name";
        String field = "Item Name";
        String sortOrder = "";
        String order = "Ascending";
        String sortLimit = "";
        String limit = "All Records";

        if (jComboBox5.getSelectedIndex() != 0) {
            if (String.valueOf(jComboBox5.getSelectedItem()).equals("Income")) {
                sortField = "income";
                field = "Total Income";
            } else {
                sortField = "qty";
                field = "Sold Quantity";
            }
        }

        if (jComboBox6.getSelectedIndex() != 0) {
            if (String.valueOf(jComboBox6.getSelectedItem()).equals("Ascending")) {
                sortOrder = "ASC";
                order = "Ascending";
            } else {
                sortOrder = "DESC";
                order = "Descending";
            }
        }

        if (jComboBox7.getSelectedIndex() != 0) {
            sortLimit = "LIMIT " + String.valueOf(jComboBox7.getSelectedItem()).split(" ")[1];
            limit = String.valueOf(jComboBox7.getSelectedItem()).split(" ")[1];
        }

        try {
            File report = new File(System.getProperty("user.dir") + File.separator + "reports/salesByItem.jasper");

            if (!report.exists()) {
                JOptionPane.showMessageDialog(jPanel21, "Report file not found! Please contact support", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            ResultSet result = Mysql.execute("SELECT  "
                    + "SUM(menu_invoice_item.selling_price-menu_invoice_item.discount * menu_invoice_item.qty) AS income FROM  invoice "
                    + "INNER JOIN `menu_invoice_item` ON menu_invoice_item.invoice_id = invoice.id "
                    + "INNER JOIN menu_item ON menu_item.id = menu_invoice_item.menu_item_id "
                    + "INNER JOIN `user` ON user.mobile = invoice.user_mobile "
                    + "WHERE `date` >=  '" + parameters.get("to") + "' AND `date` <=  '" + parameters.get("from") + "' ");

            if (result.next()) {
                parameters.put("total", "Rs. " + new DecimalFormat("#,###.00").format(result.getDouble("income")));
            }
            parameters.put("sortCriteria", sortField + " " + sortOrder + " " + sortLimit);
            parameters.put("limit", limit);
            parameters.put("sort", order);
            parameters.put("sortBy", field);

            JasperPrint fillReport = JasperFillManager.fillReport(report.getPath(), parameters, Mysql.getConnection());
            JasperViewer viewer = new JasperViewer(fillReport, false);
            emptyLabel = jLabel5;
            jPanel21.removeAll();
            jPanel21.add(viewer.getRootPane());
            jPanel21.updateUI();
        } catch (JRException ex) {
            Splash.logger.log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        } catch (SQLException ex) {
            Splash.logger.log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
    }

    private void printSalesByCategoryReport(HashMap<String, Object> parameters) {
        String sortField = "name";
        String field = "Item Name";
        String sortOrder = "";
        String order = "Ascending";

        if (jComboBox5.getSelectedIndex() != 0) {
            if (String.valueOf(jComboBox5.getSelectedItem()).equals("Income")) {
                sortField = "income";
                field = "Total Income";
            } else {
                sortField = "qty";
                field = "Sold Quantity";
            }
        }

        if (jComboBox6.getSelectedIndex() != 0) {
            if (String.valueOf(jComboBox6.getSelectedItem()).equals("Ascending")) {
                sortOrder = "ASC";
                order = "Ascending";
            } else {
                sortOrder = "DESC";
                order = "Descending";
            }
        }

        parameters.put("sortCriteria", sortField + " " + sortOrder);
        parameters.put("order", order);
        parameters.put("orderBy", field);

        try {
            File resource = new File(System.getProperty("user.dir") + File.separator + "reports/salesByCategory.jasper");
            File resourceSub = new File(System.getProperty("user.dir") + File.separator + "reports/categoryItems.jasper");
            if (!resource.exists() || !resourceSub.exists()) {
                JOptionPane.showMessageDialog(jPanel21, "Report file not found! Please contact support", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            JasperFillManager.fillReport(resourceSub.getPath(), parameters, Mysql.getConnection());
            JasperPrint fillReport = JasperFillManager.fillReport(resource.getPath(), parameters, Mysql.getConnection());
            JasperViewer viewer = new JasperViewer(fillReport, false);
            emptyLabel = jLabel5;
            jPanel21.removeAll();
            jPanel21.add(viewer.getRootPane());
            jPanel21.updateUI();
        } catch (JRException ex) {
            Splash.logger.log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
    }

    private void loadData() {
        loadCashierList();
        loadMenuItemCategoryList();
        loadBrandList();
        loadSupplierList();

    }

    private void loadMenuItemCategoryList() {
        try {
            ResultSet result = Mysql.execute("SELECT * FROM `menu_item_category`");

            Vector category = new Vector();
            category.add("Select Category");
            menuCategoryMap.put("Select Category", "");
            while (result.next()) {
                category.add(result.getString("name"));
                menuCategoryMap.put(result.getString("name"), result.getString("id"));
            }
            jComboBox3.setModel(new DefaultComboBoxModel(category));

        } catch (SQLException ex) {
            Splash.logger.log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
    }

    private void loadBrandList() {
        try {
            ResultSet result = Mysql.execute("SELECT * FROM `brand`");

            Vector brand = new Vector();
            brand.add("Select Brand");
            brandMap.put("Select Brand", "");
            while (result.next()) {
                brand.add(result.getString("name"));
                brandMap.put(result.getString("name"), result.getString("id"));
            }
//            jComboBox2.setModel(new DefaultComboBoxModel(brand));

        } catch (SQLException ex) {
            Splash.logger.log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
    }

    private void resetMenuTab() {
        jPanel43.removeAll();
        jPanel43.add(jLabel6);
        jPanel43.updateUI();
    }

    private void generateMenuReport() {
        try {
            File mainReport = new File(System.getProperty("user.dir") + File.separator + "reports/menuMain.jasper");
            File subReport1 = new File(System.getProperty("user.dir") + File.separator + "reports/menuSub.jasper");
            File subReport2 = new File(System.getProperty("user.dir") + File.separator + "reports/menuSub2.jasper");
            if (!mainReport.exists() || !subReport1.exists() || !subReport2.exists()) {
                JOptionPane.showMessageDialog(jPanel2, "Report file not found! Please contact support", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            HashMap<String, Object> parameters = new HashMap<>();
            parameters.put("date", new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));
            parameters.put("category", menuCategoryMap.get(String.valueOf(jComboBox3.getSelectedItem())));

            JasperFillManager.fillReport(subReport1.getPath(), parameters, Mysql.getConnection());
            JasperFillManager.fillReport(subReport2.getPath(), parameters, Mysql.getConnection());
            JasperPrint report = JasperFillManager.fillReport(mainReport.getPath(), parameters, Mysql.getConnection());

            JasperViewer viever = new JasperViewer(report, false);

            jPanel43.removeAll();
            jPanel43.add(viever.getRootPane());
            jPanel43.updateUI();

        } catch (JRException ex) {
            Splash.logger.log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
    }

    private void resetSTockTab() {
        jPanel57.removeAll();
        jPanel57.add(jLabel7);
        jLabel7.setText("Your Report Will be Diplayed Here");
        jPanel57.updateUI();
    }

    private void resetSTockTab(String message) {
        jPanel57.removeAll();
        jPanel57.add(jLabel7);
        jLabel7.setText(message);
        jPanel57.updateUI();
        JOptionPane.showMessageDialog(this, message, "Warning!", JOptionPane.WARNING_MESSAGE);
    }

    private void generateStockReport() {
        if (directSellingStock.isSelected()) {
            printDirrectSellingStock();
        } else if (directSellingLimitedStock.isSelected()) {
            printDirrectSellingLimitedStock();
        } else if (kitchenStock.isSelected()) {
            printKitchenStock();
        } else if (kitchenStockLimitedStock.isSelected()) {
            printKitchenStockLimitedStock();
        } else if (damagedStock.isSelected()) {
            printDamagedStock();
        } else if (directSellingExpireSoon.isSelected()) {
            printDirectSellingExpireSoonStock();
        } else if (directSellingExpired.isSelected()) {
            printDirectSellingExpiredStock();
        } else if (kitchenExpireSoon.isSelected()) {
            printKitchenExpireSoonStock();
        } else if (kitchenExpired.isSelected()) {
            printKitchenExpiredStock();
        }
    }

    private void printDirrectSellingStock() {
        try {
            File mainReport = new File(System.getProperty("user.dir") + File.separator + "reports/directStock.jasper");

            if (!mainReport.exists()) {
                JOptionPane.showMessageDialog(jPanel7, "Report file not found! Please contact support", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            HashMap<String, Object> parameters = new HashMap<>();
            parameters.put("date", new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));
            String count = "0";
            ResultSet result = Mysql.execute("SELECT COUNT(direct_selling_stock.id) AS `count` FROM direct_selling_stock "
                    + "WHERE `direct_selling_stock`.`active_state_state_id`=1");
            if (result.next()) {
                count = result.getString("count");
            }

            parameters.put("items", count);

            JasperPrint report = JasperFillManager.fillReport(mainReport.getPath(), parameters, Mysql.getConnection());

            JasperViewer viever = new JasperViewer(report, false);

            jPanel57.removeAll();
            jPanel57.add(viever.getRootPane());
            jPanel57.updateUI();

        } catch (JRException ex) {
            Splash.logger.log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        } catch (SQLException ex) {
            Splash.logger.log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
    }

    private void printDirrectSellingLimitedStock() {
        try {
            File mainReport = new File(System.getProperty("user.dir") + File.separator + "reports/directStockLimited.jasper");

            if (!mainReport.exists()) {
                JOptionPane.showMessageDialog(jPanel7, "Report file not found! Please contact support", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            HashMap<String, Object> parameters = new HashMap<>();
            parameters.put("date", new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));
            String count = "0";
            ResultSet result = Mysql.execute("SELECT COUNT(direct_selling_stock.id) AS `count` FROM direct_selling_stock "
                    + "WHERE `qty` < '10' AND `direct_selling_stock`.`active_state_state_id`=1");
            if (result.next()) {
                count = result.getString("count");
            }

            parameters.put("items", count);
            parameters.put("limit", String.valueOf(jComboBox2.getSelectedItem()));

            JasperPrint report = JasperFillManager.fillReport(mainReport.getPath(), parameters, Mysql.getConnection());
            if (report.getPages().size() > 0) {
                JasperViewer viever = new JasperViewer(report, false);
                jPanel57.removeAll();
                jPanel57.add(viever.getRootPane());
                jPanel57.updateUI();
            } else {
                resetSTockTab("No records found.");
            }

        } catch (JRException ex) {
            Splash.logger.log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        } catch (SQLException ex) {
            Splash.logger.log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
    }

    private void printKitchenStock() {
        try {
            HashMap<String, Object> parameters = new HashMap<>();
            parameters.put("date", new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));
            String count = "0";
            ResultSet result = Mysql.execute("SELECT COUNT(id) AS `count` FROM kitchen_stock ");
            if (result.next()) {
                count = result.getString("count");
            }

            parameters.put("items", count);

            URL mainReport = getClass().getResource("/com/cafe/reports/kitchenStock.jasper");

            JasperPrint report = JasperFillManager.fillReport(mainReport.getPath(), parameters, Mysql.getConnection());

            JasperViewer viever = new JasperViewer(report, false);

            jPanel57.removeAll();
            jPanel57.add(viever.getRootPane());
            jPanel57.updateUI();

        } catch (JRException ex) {
            Splash.logger.log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        } catch (SQLException ex) {
            Splash.logger.log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
    }

    private void printKitchenStockLimitedStock() {
        try {
            HashMap<String, Object> parameters = new HashMap<>();
            parameters.put("date", new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));
            String count = "0";
            ResultSet result = Mysql.execute("SELECT COUNT(id) AS `count` FROM kitchen_stock WHERE `qty` < '10'");
            if (result.next()) {
                count = result.getString("count");
            }
            parameters.put("limit", String.valueOf(jComboBox2.getSelectedItem()));
            parameters.put("items", count);
            URL mainReport = getClass().getResource("/com/cafe/reports/kitchenStockLimited.jasper");

            JasperPrint report = JasperFillManager.fillReport(mainReport.getPath(), parameters, Mysql.getConnection());

            JasperViewer viever = new JasperViewer(report, false);

            jPanel57.removeAll();
            jPanel57.add(viever.getRootPane());
            jPanel57.updateUI();

        } catch (JRException ex) {
            Splash.logger.log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        } catch (SQLException ex) {
            Splash.logger.log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
    }

    private void printDamagedStock() {
        try {
            File mainReport = new File(System.getProperty("user.dir") + File.separator + "reports/damagedStock.jasper");
            File subReport1 = new File(System.getProperty("user.dir") + File.separator + "reports/damagedDirect.jasper");
            File subReport2 = new File(System.getProperty("user.dir") + File.separator + "reports/damagedKitchen.jasper");

            if (!mainReport.exists() || !subReport1.exists() || !subReport2.exists()) {
                JOptionPane.showMessageDialog(jPanel7, "Report file not found! Please contact support", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            HashMap<String, Object> parameters = new HashMap<>();
            parameters.put("date", new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));
            String count = "0";
            ResultSet result = Mysql.execute("SELECT COUNT(*)+(SELECT COUNT(*) AS COUNT  FROM kitchen_damage_stock) AS count from direct_selling_damage_stock ");
            if (result.next()) {
                count = result.getString("count");
            }

            parameters.put("items", count);
            JasperFillManager.fillReport(subReport1.getPath(), parameters, Mysql.getConnection());
            JasperFillManager.fillReport(subReport2.getPath(), parameters, Mysql.getConnection());

            JasperPrint report = JasperFillManager.fillReport(mainReport.getPath(), parameters, Mysql.getConnection());

            JasperViewer viever = new JasperViewer(report, false);

            jPanel57.removeAll();
            jPanel57.add(viever.getRootPane());
            jPanel57.updateUI();

        } catch (JRException ex) {
            Splash.logger.log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        } catch (SQLException ex) {
            Splash.logger.log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
    }

    private void resetGrnTab() {
        jPanel58.removeAll();
        jPanel58.add(jLabel8);
        jPanel58.updateUI();
    }

    private void generateGrnReport() {
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
        String today = formatter.format(new Date());

        String supplier = "";
        String from = "";
        String to = "";

        if (jComboBox4.getSelectedIndex() != 0) {
            supplier = String.valueOf(jComboBox4.getSelectedItem()).split(" - ")[0];
        }

        if (jCheckBox2.isSelected()) {
            from = today;
            to = "2024-04-01";
        } else {
            if (jDateChooser4.getDate() != null && jDateChooser3.getDate() != null) {
                from = formatter.format(jDateChooser3.getDate());
                to = formatter.format(jDateChooser4.getDate());
            }
        }

        if ((jDateChooser4.getDate() == null || jDateChooser3.getDate() == null) && !jCheckBox2.isSelected()) {
            JOptionPane.showMessageDialog(this, "Please select valid Dates, Otherwise Tick the check box for All records", "Warning!", JOptionPane.WARNING_MESSAGE);
        } else {
            HashMap<String, Object> parameters = new HashMap<>();
            parameters.put("supplier", supplier);
            parameters.put("to", to);
            parameters.put("from", from);
            if (grnSummary.isSelected()) {
                printGrnSummaryReport(parameters);
            } else if (grnFull.isSelected()) {
                printGrnFullReport(parameters);
            }
        }

    }

    private void printGrnSummaryReport(HashMap<String, Object> parameters) {
        try {
            File mainReport = new File(System.getProperty("user.dir") + File.separator + "reports/grnMain.jasper");
            File subReport1 = new File(System.getProperty("user.dir") + File.separator + "reports/grnKitchen.jasper");
            File subReport2 = new File(System.getProperty("user.dir") + File.separator + "reports/grnDirect.jasper");

            if (!mainReport.exists() || !subReport1.exists() || !subReport2.exists()) {
                JOptionPane.showMessageDialog(jPanel4, "Report file not found! Please contact support", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            parameters.put("date", new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));

            JasperFillManager.fillReport(subReport1.getPath(), parameters, Mysql.getConnection());
            JasperFillManager.fillReport(subReport2.getPath(), parameters, Mysql.getConnection());

            JasperPrint fillReport = JasperFillManager.fillReport(mainReport.getPath(), parameters, Mysql.getConnection());
            JasperViewer viewer = new JasperViewer(fillReport, false);

            jPanel58.removeAll();
            jPanel58.add(viewer.getRootPane());
            jPanel58.updateUI();
        } catch (JRException ex) {
            Splash.logger.log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
    }

    private void printGrnFullReport(HashMap<String, Object> parameters) {
        try {
            File mainReport = new File(System.getProperty("user.dir") + File.separator + "reports/grnFullMain.jasper");
            File subReport1 = new File(System.getProperty("user.dir") + File.separator + "reports/grnFullKitchen.jasper");
            File subReport2 = new File(System.getProperty("user.dir") + File.separator + "reports/grnFullDirect.jasper");
            File subReport1sub = new File(System.getProperty("user.dir") + File.separator + "reports/grnFullKitchenSub.jasper");
            File subReport2sub = new File(System.getProperty("user.dir") + File.separator + "reports/grnFullDirectSub.jasper");

            if (!mainReport.exists() || !subReport1.exists() || !subReport2.exists() || !subReport1sub.exists() | !subReport2sub.exists()) {
                JOptionPane.showMessageDialog(jPanel4, "Report file not found! Please contact support", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            parameters.put("date", new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));

            JasperFillManager.fillReport(subReport1sub.getPath(), parameters, Mysql.getConnection());
            JasperFillManager.fillReport(subReport2sub.getPath(), parameters, Mysql.getConnection());
            JasperFillManager.fillReport(subReport1.getPath(), parameters, Mysql.getConnection());
            JasperFillManager.fillReport(subReport2.getPath(), parameters, Mysql.getConnection());

            JasperPrint fillReport = JasperFillManager.fillReport(mainReport.getPath(), parameters, Mysql.getConnection());
            JasperViewer viewer = new JasperViewer(fillReport, false);

            jPanel58.removeAll();
            jPanel58.add(viewer.getRootPane());
            jPanel58.updateUI();
        } catch (JRException ex) {
            Splash.logger.log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
    }

    private void loadSupplierList() {
        try {
            ResultSet result = Mysql.execute("SELECT * FROM supplier ");
            Vector v = new Vector();
            v.add("Select Supplier");
            while (result.next()) {
                v.add(result.getString("mobile") + " - " + result.getString("name"));
            }
            jComboBox4.setModel(new DefaultComboBoxModel(v));
        } catch (SQLException ex) {
            Splash.logger.log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
    }

    private void hideCashierSelector() {
        new Thread(() -> {
            if (jPanel20.getPreferredSize().height > 0) {
                for (int i = jPanel20.getPreferredSize().height; i > 0; i -= 5) {
                    jPanel20.setPreferredSize(new Dimension(jPanel20.getSize().width, i));
                    try {
                        Thread.sleep(5);
                    } catch (InterruptedException ex) {
                        Splash.logger.log(Level.SEVERE, null, ex);
                        ex.printStackTrace();
                    }
                    jPanel19.updateUI();
                }
                jPanel20.setPreferredSize(new Dimension(jPanel20.getSize().width, 0));
                jPanel19.updateUI();
            }
        }).start();
    }

    private void showCashierSelector() {
        new Thread(() -> {
            if (jPanel20.getPreferredSize().height < 97) {
                for (int i = 0; i < 97; i += 5) {
                    jPanel20.setPreferredSize(new Dimension(jPanel20.getPreferredSize().width, i));
                    try {
                        Thread.sleep(5);
                    } catch (InterruptedException ex) {
                        Splash.logger.log(Level.SEVERE, null, ex);
                        ex.printStackTrace();
                    }
                    jPanel19.updateUI();
                }
                jPanel20.setPreferredSize(new Dimension(jPanel20.getPreferredSize().width, 97));
                jPanel19.updateUI();
            }
        }).start();
    }

    private void hideSort() {
        new Thread(() -> {
            if (jPanel25.getPreferredSize().height > 0) {
                for (int i = jPanel25.getPreferredSize().height; i > 0; i -= 5) {
                    jPanel25.setPreferredSize(new Dimension(jPanel25.getSize().width, i));
                    try {
                        Thread.sleep(5);
                    } catch (InterruptedException ex) {
                        Splash.logger.log(Level.SEVERE, null, ex);
                        ex.printStackTrace();
                    }
                    jPanel6.updateUI();
                }
                jPanel25.setPreferredSize(new Dimension(jPanel25.getSize().width, 0));
                jPanel6.updateUI();
            }
        }).start();
    }

    private void showSort() {
        new Thread(() -> {
            if (jPanel25.getPreferredSize().height < 190) {
                for (int i = jPanel25.getPreferredSize().height; i < 190; i += 5) {
                    jPanel25.setPreferredSize(new Dimension(jPanel25.getSize().width, i));
                    try {
                        Thread.sleep(5);
                    } catch (InterruptedException ex) {
                        Splash.logger.log(Level.SEVERE, null, ex);
                        ex.printStackTrace();
                    }
                    jPanel6.updateUI();
                }
                jPanel25.setPreferredSize(new Dimension(jPanel25.getSize().width, 190));
            }
            if (salesByCategory.isSelected()) {
                hideLimitSelect();
            }
            jPanel6.updateUI();
        }).start();
    }

    private void setupDatechooserComponents() {
        Date date = new Date();
        jDateChooser2.setMaxSelectableDate(date);
        jDateChooser2.setDate(date);
        jDateChooser1.setDate(new Date(jDateChooser2.getDate().getTime() - 1000 * 60 * 60 * 24));
        setupSalesDateChoosers();

        jDateChooser3.setMaxSelectableDate(date);
        jDateChooser3.setDate(date);
        jDateChooser4.setDate(new Date(jDateChooser3.getDate().getTime() - 1000 * 60 * 60 * 24));
        setupGrnDateChoosers();

        jDateChooser1.getComponent(1).addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                try {
                    jDateChooser1.getComponent(1).setForeground(new Color(77, 120, 204));
                } catch (Exception e) {
                }
            }
        });
        jDateChooser2.getComponent(1).addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                try {
                    setupSalesDateChoosers();
                } catch (Exception e) {
                }
            }
        });
        jDateChooser4.getComponent(1).addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                try {
                    jDateChooser4.getComponent(1).setForeground(new Color(77, 120, 204));
                } catch (Exception e) {
                }
            }
        });
        jDateChooser3.getComponent(1).addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                try {
                    setupGrnDateChoosers();
                } catch (Exception e) {
                }
            }
        });
    }

    private void setupDefaultComponentVisibility() {
        hideSort();
        kitchenExpireSoon.setVisible(false);
        kitchenExpired.setVisible(false);
        kitchenStock.setVisible(false);
        kitchenStockLimitedStock.setVisible(false);
    }

    private void hideLimitSelect() {
        jPanel25.setPreferredSize(new Dimension(jPanel25.getSize().width, 100));
        jPanel6.updateUI();
    }

    private void showLimitSelect() {
        jPanel25.setPreferredSize(new Dimension(jPanel25.getSize().width, 200));
        jPanel6.updateUI();
    }

    private void printDirectSellingExpireSoonStock() {
        File source = new File(System.getProperty("user.dir") + File.separator + "reports/directExpireSoon.jasper");
        if (!source.exists()) {
            JOptionPane.showMessageDialog(jPanel3, "Report file not found! Please contact support", "Error", JOptionPane.ERROR_MESSAGE);            
        } else {
            printDatabaseReport(source.getPath());
        }
    }

    private void printDirectSellingExpiredStock() {
        File source = new File(System.getProperty("user.dir") + File.separator + "reports/directExpired.jasper");
        if (!source.exists()) {
            JOptionPane.showMessageDialog(jPanel3, "Report file not found! Please contact support", "Error", JOptionPane.ERROR_MESSAGE);            
        } else {
            printDatabaseReport(source.getPath());
        }        
    }

    private void printKitchenExpireSoonStock() {
        File source = new File(System.getProperty("user.dir") + File.separator + "reports/kitchenExpireSoon.jasper");
        if (!source.exists()) {
            JOptionPane.showMessageDialog(jPanel3, "Report file not found! Please contact support", "Error", JOptionPane.ERROR_MESSAGE);            
        } else {
            printDatabaseReport(source.getPath());
        }
    }

    private void printKitchenExpiredStock() {
        File source = new File(System.getProperty("user.dir") + File.separator + "reports/kitchenExpired.jasper");
        if (!source.exists()) {
            JOptionPane.showMessageDialog(jPanel3, "Report file not found! Please contact support", "Error", JOptionPane.ERROR_MESSAGE);            
        } else {
            printDatabaseReport(source.getPath());
        }
    }

    private void printDatabaseReport(String reportPath) {
        try {
            HashMap<String, Object> parameters = new HashMap<>();
            JasperPrint report = JasperFillManager.fillReport(reportPath, parameters, Mysql.getConnection());
            if (report.getPages().size() > 0) {
                JasperViewer viever = new JasperViewer(report, false);

                jPanel57.removeAll();
                jPanel57.add(viever.getRootPane());
                jPanel57.updateUI();
            } else {
                JOptionPane.showMessageDialog(this, "No records found.", "Warning!", JOptionPane.WARNING_MESSAGE);
            }

        } catch (JRException ex) {
            Splash.logger.log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
    }

}
