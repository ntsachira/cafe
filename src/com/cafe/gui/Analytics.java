/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.cafe.gui;

import com.cafe.model.Mysql;
import com.cafe.model.Theme;
import com.cafe.style.CustomStyle;
import com.cafe.style.NewTheme;
import com.formdev.flatlaf.FlatClientProperties;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.MouseEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.logging.Level;
import javax.swing.JScrollBar;
import javax.swing.SwingUtilities;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author Dell
 */
public class Analytics extends javax.swing.JPanel implements Theme {

    private Dashboard dashboard;
    private Font titleFont = new Font("Segoe UI", Font.BOLD, 18);

    public Dashboard getDashboard() {
        return dashboard;
    }

    public void setDashboard(Dashboard dashboard) {
        this.dashboard = dashboard;
    }
    /**
     * References to the <code>JFreeChart</code> instances displayed on the
     * dashPanel
     */
    private JFreeChart salesChart;
    private JFreeChart categorySalesChart;
    private JFreeChart dailySalesByCategoryChart;
    private JFreeChart reservationStatusChart;
    private JFreeChart preOrderStatusCahrt;
    private JFreeChart invoiceChart;
    private JFreeChart paymentMethodChart;    

    /**
     * Creates new form Analytics
     */
    public Analytics() {
        initComponents();
        setCharts();
        setStyle();
    }

    private void setCharts() {
        setSalesChart();
        setCategorySalesChart();
        setDailySalesByCategoryChart();
        setReservationStatusChart();
        setPreOrderStateChart();
        setDailyInvoiceChart();
        setPaymentMethodChart();       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();

        jMenuItem1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/cafe/controlImg/refresh22.png"))); // NOI18N
        jMenuItem1.setText("Refresh");
        jMenuItem1.setIconTextGap(10);
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 20, 10, 20));
        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout(0, 10));

        jPanel2.setPreferredSize(new java.awt.Dimension(935, 48));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jButton1.setBackground(new java.awt.Color(77, 120, 204));
        jButton1.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("GENERATE REPORTS");
        jButton1.setBorderPainted(false);
        jButton1.setPreferredSize(new java.awt.Dimension(200, 48));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1, java.awt.BorderLayout.LINE_END);

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jScrollPane1.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                jScrollPane1MouseWheelMoved(evt);
            }
        });

        jPanel3.setMinimumSize(new java.awt.Dimension(300, 1000));
        jPanel3.setPreferredSize(new java.awt.Dimension(1200, 1200));
        jPanel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jPanel3MouseReleased(evt);
            }
        });
        jPanel3.setLayout(new java.awt.GridLayout(1, 3));

        jPanel4.setMinimumSize(new java.awt.Dimension(100, 460));
        jPanel4.setPreferredSize(new java.awt.Dimension(400, 100));
        jPanel4.setLayout(new javax.swing.BoxLayout(jPanel4, javax.swing.BoxLayout.Y_AXIS));

        jPanel12.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 10, 10, 10));
        jPanel12.setMaximumSize(new java.awt.Dimension(32767, 500));
        jPanel12.setMinimumSize(new java.awt.Dimension(100, 300));
        jPanel12.setPreferredSize(new java.awt.Dimension(400, 400));
        jPanel12.setLayout(new java.awt.BorderLayout());

        jPanel22.setLayout(new java.awt.BorderLayout());
        jPanel12.add(jPanel22, java.awt.BorderLayout.CENTER);

        jPanel4.add(jPanel12);

        jPanel16.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        jPanel16.setMaximumSize(new java.awt.Dimension(32767, 500));
        jPanel16.setMinimumSize(new java.awt.Dimension(100, 300));
        jPanel16.setPreferredSize(new java.awt.Dimension(400, 400));
        jPanel16.setLayout(new java.awt.BorderLayout());

        jPanel23.setLayout(new java.awt.BorderLayout());
        jPanel16.add(jPanel23, java.awt.BorderLayout.CENTER);

        jPanel4.add(jPanel16);

        jPanel17.setMaximumSize(new java.awt.Dimension(32767, 500));
        jPanel17.setMinimumSize(new java.awt.Dimension(100, 300));
        jPanel17.setPreferredSize(new java.awt.Dimension(400, 400));
        jPanel17.setLayout(new java.awt.BorderLayout());
        jPanel4.add(jPanel17);

        jPanel3.add(jPanel4);

        jPanel6.setMaximumSize(new java.awt.Dimension(32767, 300));
        jPanel6.setMinimumSize(new java.awt.Dimension(100, 460));
        jPanel6.setPreferredSize(new java.awt.Dimension(400, 612));
        jPanel6.setLayout(new javax.swing.BoxLayout(jPanel6, javax.swing.BoxLayout.Y_AXIS));

        jPanel8.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 10, 10, 10));
        jPanel8.setMaximumSize(new java.awt.Dimension(32767, 500));
        jPanel8.setMinimumSize(new java.awt.Dimension(300, 300));
        jPanel8.setPreferredSize(new java.awt.Dimension(400, 400));
        jPanel8.setLayout(new java.awt.BorderLayout());

        jPanel13.setLayout(new java.awt.BorderLayout());
        jPanel8.add(jPanel13, java.awt.BorderLayout.CENTER);

        jPanel6.add(jPanel8);

        jPanel5.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        jPanel5.setMaximumSize(new java.awt.Dimension(32767, 500));
        jPanel5.setMinimumSize(new java.awt.Dimension(100, 300));
        jPanel5.setPreferredSize(new java.awt.Dimension(400, 400));
        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel14.setLayout(new java.awt.BorderLayout());
        jPanel5.add(jPanel14, java.awt.BorderLayout.CENTER);

        jPanel6.add(jPanel5);

        jPanel11.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 20, 10));
        jPanel11.setMaximumSize(new java.awt.Dimension(32767, 500));
        jPanel11.setMinimumSize(new java.awt.Dimension(100, 300));
        jPanel11.setPreferredSize(new java.awt.Dimension(400, 400));
        jPanel11.setLayout(new java.awt.BorderLayout());

        jPanel15.setLayout(new java.awt.BorderLayout());
        jPanel11.add(jPanel15, java.awt.BorderLayout.CENTER);

        jPanel6.add(jPanel11);

        jPanel3.add(jPanel6);

        jPanel7.setMaximumSize(new java.awt.Dimension(32767, 300));
        jPanel7.setMinimumSize(new java.awt.Dimension(100, 460));
        jPanel7.setPreferredSize(new java.awt.Dimension(400, 700));
        jPanel7.setLayout(new javax.swing.BoxLayout(jPanel7, javax.swing.BoxLayout.Y_AXIS));

        jPanel9.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 10, 10, 10));
        jPanel9.setMaximumSize(new java.awt.Dimension(32767, 500));
        jPanel9.setMinimumSize(new java.awt.Dimension(400, 300));
        jPanel9.setPreferredSize(new java.awt.Dimension(461, 400));
        jPanel9.setLayout(new java.awt.BorderLayout());

        jPanel19.setLayout(new java.awt.BorderLayout());
        jPanel9.add(jPanel19, java.awt.BorderLayout.CENTER);

        jPanel7.add(jPanel9);

        jPanel10.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        jPanel10.setMaximumSize(new java.awt.Dimension(32767, 500));
        jPanel10.setMinimumSize(new java.awt.Dimension(400, 300));
        jPanel10.setPreferredSize(new java.awt.Dimension(461, 400));
        jPanel10.setLayout(new java.awt.BorderLayout());

        jPanel20.setLayout(new java.awt.BorderLayout());
        jPanel10.add(jPanel20, java.awt.BorderLayout.CENTER);

        jPanel7.add(jPanel10);

        jPanel18.setMaximumSize(new java.awt.Dimension(32767, 500));
        jPanel18.setMinimumSize(new java.awt.Dimension(400, 300));
        jPanel18.setPreferredSize(new java.awt.Dimension(461, 400));
        jPanel18.setLayout(new java.awt.BorderLayout());
        jPanel18.add(jPanel21, java.awt.BorderLayout.CENTER);

        jPanel7.add(jPanel18);

        jPanel3.add(jPanel7);

        jScrollPane1.setViewportView(jPanel3);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        dashboard.setReport();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        refreshCharts();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jPanel3MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MouseReleased
        // TODO add your handling code here:
        if (evt.getButton() == MouseEvent.BUTTON3) {
            SwingUtilities.updateComponentTreeUI(jPopupMenu1);
            jPopupMenu1.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jPanel3MouseReleased

    private void jScrollPane1MouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_jScrollPane1MouseWheelMoved
        // TODO add your handling code here:
        JScrollBar scrollbar = jScrollPane1.getVerticalScrollBar(); 
        scrollbar.setValue(scrollbar.getValue()+evt.getWheelRotation()*20);        
    }//GEN-LAST:event_jScrollPane1MouseWheelMoved


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void setCategorySalesChart() {
        try {
            ResultSet result = Mysql.execute("SELECT menu_item_category.name,SUM(menu_invoice_item.qty) AS amount FROM invoice INNER JOIN menu_invoice_item "
                    + "ON invoice.id = menu_invoice_item.invoice_id INNER JOIN menu_item "
                    + "ON menu_item.id = menu_invoice_item.menu_item_id INNER JOIN menu_item_category "
                    + "ON menu_item_category.id = menu_item.menu_item_category_id GROUP BY menu_item_category.id");

            ResultSet result2 = Mysql.execute("SELECT menu_item_category.name,SUM(direct_invoice_item.qty) AS amount FROM invoice "
                    + "INNER JOIN direct_invoice_item ON invoice.id = direct_invoice_item.invoice_id "
                    + "INNER JOIN direct_selling_stock ON direct_invoice_item.direct_selling_stock_id = direct_selling_stock.id "
                    + "INNER JOIN menu_item ON menu_item.id = direct_selling_stock.menu_item_id "
                    + "INNER JOIN menu_item_category ON menu_item_category.id = menu_item.menu_item_category_id "
                    + "GROUP BY menu_item_category.id");

            HashMap<String, Double> dataMap = new HashMap<>();
            while (result.next()) {
                dataMap.put(result.getString("menu_item_category.name"), result.getDouble("amount"));
            }
            while (result2.next()) {
                dataMap.put(result2.getString("menu_item_category.name"), result2.getDouble("amount"));
            }

            categorySalesChart = createPieChart(dataMap);
            categorySalesChart.setTitle("SALES BY CATEGORY");
            ChartPanel chartPanel = new ChartPanel(categorySalesChart);

            jPanel13.removeAll();
            jPanel13.add(chartPanel);
            jPanel13.putClientProperty(FlatClientProperties.STYLE, "border:5,5,5,5,#4D78CC,0,20");
            SwingUtilities.updateComponentTreeUI(jPanel13);
        } catch (SQLException ex) {
            Splash.logger.log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
    }

    private JFreeChart createPieChart(HashMap<String, Double> dataMap) {
        DefaultPieDataset dataset = new DefaultPieDataset();
        dataMap.forEach((key, value) -> {
            dataset.setValue(key + "(" + value + ")", value);
        });

        JFreeChart pieChart = ChartFactory.createPieChart("", dataset, true, true, false);

        PiePlot plot = (PiePlot) pieChart.getPlot();
        plot.setBackgroundAlpha(0f);

        Color[] seriesColorList = {
             new Color(0, 204, 204),new Color(77, 120, 204),
            new Color(255, 99, 97),new Color(255, 166, 0),
            new Color(204, 0, 204),new Color(188, 80, 144)
        };

        Object[] keys = dataset.getKeys().toArray();
        for (int i = 0; i < keys.length; i++) {
            plot.setSectionPaint(keys[i].toString(), seriesColorList[i]);
        }

        plot.setShadowPaint(NewTheme.TRANSPARENT);
        plot.setLabelBackgroundPaint(NewTheme.TRANSPARENT);
        plot.setLabelShadowPaint(NewTheme.TRANSPARENT);
        plot.setLabelOutlinePaint(NewTheme.TRANSPARENT);
        plot.setLabelFont(CustomStyle.getCustomFont(14));

        LegendTitle legend = pieChart.getLegend();
        pieChart.getTitle().setFont(titleFont);
        pieChart.setPadding(new RectangleInsets(10, 20, 10, 20));
        legend.setBackgroundPaint(NewTheme.TRANSPARENT);
        legend.setItemFont(CustomStyle.getCustomFont(14));

        return pieChart;
    }

    private void setSalesChart() {
        double[] amount = new double[6];
        String[] months = new String[6];
        GregorianCalendar calender = (GregorianCalendar) GregorianCalendar.getInstance();
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        for (int i = 0; i < 6; i++) {
            try {
                Date dateObj = calender.getTime();
                String date = new SimpleDateFormat("yyyy-MM").format(dateObj);
                String month = new SimpleDateFormat("MMM").format(dateObj);
                ResultSet result = Mysql.execute("SELECT SUM(total-discount) AS 'amount' FROM invoice WHERE `date` LIKE '" + date + "%'");
                if (result.next()) {
                    amount[i] = result.getDouble("amount");
                    months[i] = month;                    
                }
                if (calender.get(Calendar.MONTH) + 1 == 1) {
                    calender.roll(Calendar.YEAR, -1);
                }
                calender.roll(GregorianCalendar.MONTH, -1);
            } catch (SQLException ex) {
                Splash.logger.log(Level.SEVERE, null, ex);
                ex.printStackTrace();
            }
        }
        for(int j = (months.length-1);j>=0;j--){
            dataset.addValue(amount[j], "SALES", months[j]);
        }
        salesChart = createBarChart(dataset);
        salesChart.setPadding(new RectangleInsets(10, 20, 10, 20));
        salesChart.getLegend().setBackgroundPaint(NewTheme.TRANSPARENT);
        salesChart.getLegend().setItemFont(CustomStyle.getCustomFont(15));
        salesChart.setTitle("MONTHLY SALES");
        CategoryPlot plot = (CategoryPlot) salesChart.getPlot();
        plot.getDomainAxis().setLabel("MONTH");
        ChartPanel chartPanel = new ChartPanel(salesChart);
        jPanel14.putClientProperty(FlatClientProperties.STYLE, "border:5,5,5,5,#4D78CC,0,20");
        jPanel14.removeAll();
        jPanel14.add(chartPanel);
        SwingUtilities.updateComponentTreeUI(jPanel14);

    }

    private JFreeChart createBarChart(DefaultCategoryDataset dataset) {
        BarRenderer renderer = new BarRenderer();
        renderer.setSeriesPaint(0, new Color(77, 120, 204));
        renderer.setShadowVisible(false);
        CategoryPlot plot = new CategoryPlot(dataset, new CategoryAxis(), new NumberAxis(), renderer);
        plot.setBackgroundAlpha(0f); //set plot background transparent        

        ValueAxis rangeAxis = plot.getRangeAxis();
        rangeAxis.setTickLabelFont(CustomStyle.getCustomFont(14));

        CategoryAxis domainAxis = plot.getDomainAxis();
        domainAxis.setTickLabelFont(CustomStyle.getCustomFont(14));
        domainAxis.setLabelFont(CustomStyle.getCustomFont(15));
        return new JFreeChart("", titleFont, plot, true);

    }

    @Override
    public void setStyle() {
        setComponentTheme();
//        CustomStyle.setButtonsRoundedMax(jButton1);
        jScrollPane1.getVerticalScrollBar().putClientProperty(FlatClientProperties.STYLE, "width:15");        
    }

    @Override
    public void setComponentTheme() {
        CustomStyle.setComponentBackground(jPanel13, jPanel14, jPanel15, jPanel19,
                jPanel20, jPanel22, jPanel23);

        //sales chart style
        salesChart.setBackgroundPaint(NewTheme.BG_CARD);
        CategoryPlot salesChartPlot = (CategoryPlot) salesChart.getPlot();
        salesChartPlot.getDomainAxis().setTickLabelPaint(NewTheme.FG_CHART);
        salesChartPlot.getRangeAxis().setTickLabelPaint(NewTheme.FG_CHART);
        salesChartPlot.getDomainAxis().setLabelPaint(NewTheme.FG_CHART);
        salesChart.getTitle().setPaint(NewTheme.FG_CHART);
        salesChart.getLegend().setItemPaint(NewTheme.FG_CHART);

        //Invoice chart style
        invoiceChart.setBackgroundPaint(NewTheme.BG_CARD);
        CategoryPlot invoiceChartPlot = (CategoryPlot) invoiceChart.getPlot();
        invoiceChartPlot.getDomainAxis().setTickLabelPaint(NewTheme.FG_CHART);
        invoiceChartPlot.getRangeAxis().setTickLabelPaint(NewTheme.FG_CHART);
        invoiceChartPlot.getDomainAxis().setLabelPaint(NewTheme.FG_CHART);
        invoiceChart.getTitle().setPaint(NewTheme.FG_CHART);
        invoiceChart.getLegend().setItemPaint(NewTheme.FG_CHART);

        //category sales chart style
        categorySalesChart.setBackgroundPaint(NewTheme.BG_CARD);
        PiePlot categorySalesCartPlot = (PiePlot) categorySalesChart.getPlot();
        categorySalesCartPlot.setLabelPaint(NewTheme.FG_CHART);
        categorySalesCartPlot.setLabelLinkPaint(NewTheme.FG_CHART);
        LegendTitle categorySalesCHartlegend = categorySalesChart.getLegend();
        categorySalesCHartlegend.setItemPaint(NewTheme.FG_CHART);
        categorySalesChart.getTitle().setPaint(NewTheme.FG_CHART);

        //dailySalesByCategoryChart style
        dailySalesByCategoryChart.setBackgroundPaint(NewTheme.BG_CARD);
        dailySalesByCategoryChart.getLegend().setItemPaint(NewTheme.FG_CHART);
        dailySalesByCategoryChart.getTitle().setPaint(NewTheme.FG_CHART);
        CategoryPlot plot = (CategoryPlot) dailySalesByCategoryChart.getPlot();
        plot.getDomainAxis().setTickLabelPaint(NewTheme.FG_CHART);
        plot.getRangeAxis().setTickLabelPaint(NewTheme.FG_CHART);
        plot.getDomainAxis().setLabelPaint(NewTheme.FG_CHART);
        plot.getRangeAxis().setLabelPaint(NewTheme.FG_CHART);
        plot.getDomainAxis().setAxisLinePaint(NewTheme.FG_CHART);
        plot.getRangeAxis().setAxisLinePaint(NewTheme.FG_CHART);
        plot.setRangeGridlinePaint(NewTheme.FG_CHART);

        //reservationStatusChart styles
        reservationStatusChart.setBackgroundPaint(NewTheme.BG_CARD);
        reservationStatusChart.getTitle().setPaint(NewTheme.FG_CHART);
        reservationStatusChart.getLegend().setItemPaint(NewTheme.FG_CHART);
        PiePlot reservationStatusChartPlot = (PiePlot) reservationStatusChart.getPlot();
        reservationStatusChartPlot.setLabelPaint(NewTheme.FG_CHART);
        reservationStatusChartPlot.setLabelLinkPaint(NewTheme.FG_CHART);

        //reservationStatusChart styles
        preOrderStatusCahrt.setBackgroundPaint(NewTheme.BG_CARD);
        preOrderStatusCahrt.getTitle().setPaint(NewTheme.FG_CHART);
        preOrderStatusCahrt.getLegend().setItemPaint(NewTheme.FG_CHART);
        PiePlot preOrderStatusPlot = (PiePlot) preOrderStatusCahrt.getPlot();
        preOrderStatusPlot.setLabelPaint(NewTheme.FG_CHART);
        preOrderStatusPlot.setLabelLinkPaint(NewTheme.FG_CHART);
        
        //PaymentMethodChart styles
        paymentMethodChart.setBackgroundPaint(NewTheme.BG_CARD);
        paymentMethodChart.getTitle().setPaint(NewTheme.FG_CHART);
        paymentMethodChart.getLegend().setItemPaint(NewTheme.FG_CHART);
        PiePlot paymentMethodChartPlot = (PiePlot) paymentMethodChart.getPlot();
        paymentMethodChartPlot.setLabelPaint(NewTheme.FG_CHART);
        paymentMethodChartPlot.setLabelLinkPaint(NewTheme.FG_CHART);
    }

    private void setDailySalesByCategoryChart() {

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        for (int i = 6; i >= 0; i--) {
            try {
                ResultSet result = Mysql.execute("SELECT menu_item_category.name,SUM(menu_invoice_item.qty) AS amount ,DATE_FORMAT(invoice.date,'%d') AS `day` "
                        + "FROM invoice INNER JOIN menu_invoice_item "
                        + "ON invoice.id = menu_invoice_item.invoice_id INNER JOIN menu_item "
                        + "ON menu_item.id = menu_invoice_item.menu_item_id INNER JOIN menu_item_category "
                        + "ON menu_item_category.id = menu_item.menu_item_category_id "
                        + "WHERE invoice.date = DATE_SUB('" + new SimpleDateFormat("yyyy-MM-dd").format(new Date()) + "',INTERVAL " + i + " DAY) "
                        + "GROUP BY menu_item_category.id");

                while (result.next()) {
                    dataset.addValue(result.getDouble("amount"), result.getString("name"), result.getString("day"));
                }
                result = Mysql.execute("SELECT menu_item_category.name,SUM(direct_invoice_item.qty) AS amount ,DATE_FORMAT(invoice.date,'%d') AS `day` "
                        + "FROM invoice "
                        + "INNER JOIN direct_invoice_item ON invoice.id = direct_invoice_item.invoice_id "
                        + "INNER JOIN direct_selling_stock ON direct_invoice_item.direct_selling_stock_id = direct_selling_stock.id "
                        + "INNER JOIN menu_item ON menu_item.id = direct_selling_stock.menu_item_id "
                        + "INNER JOIN menu_item_category ON menu_item_category.id = menu_item.menu_item_category_id "
                        + "WHERE invoice.date = DATE_SUB('" + new SimpleDateFormat("yyyy-MM-dd").format(new Date()) + "',INTERVAL " + i + " DAY) "
                        + "GROUP BY menu_item_category.id");

                while (result.next()) {
                    dataset.addValue(result.getDouble("amount"), result.getString("name"), result.getString("day"));
                }
            } catch (SQLException ex) {
                Splash.logger.log(Level.SEVERE, null, ex);
                ex.printStackTrace();
            }
        }

        dailySalesByCategoryChart = ChartFactory.createLineChart("DAILY SALES BY CATEGORY", "DAY", "INCOME", dataset);
        dailySalesByCategoryChart = createBarChart(dataset);
        dailySalesByCategoryChart.getPlot().setBackgroundAlpha(0f);
        dailySalesByCategoryChart.setTitle("DAILY SALES BY CATEGORY");
       dailySalesByCategoryChart.getTitle().setFont(titleFont);
        dailySalesByCategoryChart.getLegend().setItemFont(CustomStyle.getCustomFont(15));
        dailySalesByCategoryChart.getLegend().setBackgroundPaint(NewTheme.TRANSPARENT);
        dailySalesByCategoryChart.setPadding(new RectangleInsets(10, 20, 10, 20));
        CategoryPlot plot = (CategoryPlot) dailySalesByCategoryChart.getPlot();

        plot.getRangeAxis().setTickLabelFont(CustomStyle.getCustomFont(14));
        plot.getDomainAxis().setTickLabelFont(CustomStyle.getCustomFont(14));
        plot.getDomainAxis().setLabelFont(CustomStyle.getCustomFont(14));
        plot.getRangeAxis().setLabel("");

        Color[] seriesColorList = {
            new Color(255, 166, 0), new Color(0, 204, 204),
            new Color(255, 99, 97), new Color(188, 80, 144),
            new Color(77, 120, 204), new Color(204, 0, 204),
            Color.GREEN, Color.MAGENTA, Color.RED
        };
        for (int i = 0; i < dataset.getRowCount(); i++) {
            plot.getRenderer().setSeriesStroke(i, new BasicStroke(3.0f, BasicStroke.CAP_ROUND, BasicStroke.JOIN_BEVEL));
            plot.getRenderer().setSeriesPaint(i, seriesColorList[i]);
        }

        ChartPanel chartPanel = new ChartPanel(dailySalesByCategoryChart);
        jPanel15.putClientProperty(FlatClientProperties.STYLE, "border:5,5,5,5,#4D78CC,0,20");
        jPanel15.removeAll();
        jPanel15.add(chartPanel);
        SwingUtilities.updateComponentTreeUI(jPanel15);

    }
    

    private void refreshCharts() {
        setCharts();
        setComponentTheme();
    }

    private void setReservationStatusChart() {
        try {
            ResultSet result = Mysql.execute("SELECT reservation_state.name, COUNT(reservation_state.id) AS amount "
                    + "FROM reservation "
                    + "INNER JOIN reservation_state ON reservation_state.id = reservation.state_id "
                    + "GROUP BY reservation.state_id");
            HashMap<String, Double> dataMap = new HashMap<>();
            while (result.next()) {
                dataMap.put(result.getString("name"), result.getDouble("amount"));
            }
            reservationStatusChart = createPieChart(dataMap);
            reservationStatusChart.setTitle("RESERVATION STATUS");
            reservationStatusChart.getTitle().setFont(titleFont);
            reservationStatusChart.getLegend().setItemFont(CustomStyle.getCustomFont(15));
            reservationStatusChart.setPadding(new RectangleInsets(10, 20, 10, 20));
            reservationStatusChart.getLegend().setBackgroundPaint(NewTheme.TRANSPARENT);

            ChartPanel chartPanel = new ChartPanel(reservationStatusChart);
            jPanel19.putClientProperty(FlatClientProperties.STYLE, "border:5,5,5,5,#4D78CC,0,20");
            jPanel19.removeAll();
            jPanel19.add(chartPanel);
            SwingUtilities.updateComponentTreeUI(jPanel19);

        } catch (SQLException ex) {
            Splash.logger.log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
    }

    private void setPreOrderStateChart() {
        try {
            ResultSet result = Mysql.execute("SELECT pre_order_status.name, COUNT(pre_orders.pre_order_status_id) AS amount FROM pre_orders "
                    + "INNER JOIN pre_order_status ON pre_orders.pre_order_status_id = pre_order_status.id "
                    + "GROUP BY pre_order_status.id");
            HashMap<String, Double> dataMap = new HashMap<>();
            while (result.next()) {
                dataMap.put(result.getString("name"), result.getDouble("amount"));
            }
            preOrderStatusCahrt = createPieChart(dataMap);
            preOrderStatusCahrt.setTitle("PRE ORDER STATUS");
            preOrderStatusCahrt.getTitle().setFont(titleFont);
            preOrderStatusCahrt.getLegend().setItemFont(CustomStyle.getCustomFont(15));
            preOrderStatusCahrt.setPadding(new RectangleInsets(10, 20, 10, 20));
            preOrderStatusCahrt.getLegend().setBackgroundPaint(NewTheme.TRANSPARENT);

            ChartPanel chartPanel = new ChartPanel(preOrderStatusCahrt);
            jPanel20.putClientProperty(FlatClientProperties.STYLE, "border:5,5,5,5,#4D78CC,0,20");
            jPanel20.removeAll();
            jPanel20.add(chartPanel);
            SwingUtilities.updateComponentTreeUI(jPanel20);

        } catch (SQLException ex) {
            Splash.logger.log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
    }

    private void setPaymentMethodChart() {
        try {
            ResultSet result = Mysql.execute("SELECT payment_method.name, COUNT(payment_method.id) AS amount "
                    + "FROM invoice "
                    + "INNER JOIN payment_method ON payment_method.id = invoice.payment_method_id "
                    + "GROUP BY payment_method.id ");
            HashMap<String, Double> dataMap = new HashMap<>();
            while (result.next()) {
                dataMap.put(result.getString("name"), result.getDouble("amount"));
            }
            paymentMethodChart = createPieChart(dataMap);
            paymentMethodChart.setTitle("CUSTOMER PAYMENT METHOD");
            paymentMethodChart.getTitle().setFont(titleFont);
            paymentMethodChart.getLegend().setItemFont(CustomStyle.getCustomFont(15));
            paymentMethodChart.setPadding(new RectangleInsets(10, 20, 10, 20));
            paymentMethodChart.getLegend().setBackgroundPaint(NewTheme.TRANSPARENT);

            ChartPanel chartPanel = new ChartPanel(paymentMethodChart);
            jPanel23.putClientProperty(FlatClientProperties.STYLE, "border:5,5,5,5,#4D78CC,0,20");
            jPanel23.removeAll();
            jPanel23.add(chartPanel);
            SwingUtilities.updateComponentTreeUI(jPanel23);

        } catch (SQLException ex) {
            Splash.logger.log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
    }

    private void setDailyInvoiceChart() {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        for (int i = 0; i < 7; i++) {
            try {
                ResultSet result = Mysql.execute("SELECT COUNT(id) AS `amount`, "
                        + "DATE_FORMAT( DATE_SUB('" + new SimpleDateFormat("yyyy-MM-dd").format(new Date()) + "',INTERVAL " + (6 - i) + " DAY),'%d') AS `date` "
                        + "FROM invoice WHERE `date` = DATE_SUB('" + new SimpleDateFormat("yyyy-MM-dd").format(new Date()) + "',INTERVAL " + (6 - i) + " DAY)");

                if (result.next()) {
                    dataset.addValue(result.getDouble("amount"), "Daily Invoice Count", result.getString("date"));
                }
            } catch (SQLException ex) {
                Splash.logger.log(Level.SEVERE, null, ex);
                ex.printStackTrace();
            }
        }

        invoiceChart = createBarChart(dataset);
        invoiceChart.setTitle("DAILY INVOICES");
        CategoryPlot plot = (CategoryPlot) invoiceChart.getPlot();
        plot.getDomainAxis().setLabel("DATE");
        invoiceChart.setPadding(new RectangleInsets(10, 20, 10, 20));
        invoiceChart.getLegend().setBackgroundPaint(NewTheme.TRANSPARENT);
        invoiceChart.getLegend().setItemFont(CustomStyle.getCustomFont(15));
        ChartPanel chartPanel = new ChartPanel(invoiceChart);
        jPanel22.putClientProperty(FlatClientProperties.STYLE, "border:5,5,5,5,#4D78CC,0,20");
        jPanel22.removeAll();
        jPanel22.add(chartPanel);
        SwingUtilities.updateComponentTreeUI(jPanel22);
    }

}
